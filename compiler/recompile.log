Compiling: tests/validation_programs/test_simple.c
Source code:
int ledPin;

void blink() {
    digitalWrite(ledPin, 1);
    delay(500);
    digitalWrite(ledPin, 0);
}
Parse tree: (program (declaration (type int) ledPin ;) (functionDefinition (type void) blink ( ) (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall digitalWrite ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ledPin))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall delay ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 500)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall digitalWrite ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ledPin))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Declared variable: ledPin (int)
Compiling function: blink
Registered function: blink at address 1
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compilation complete. Generated 10 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  ledPin (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  blink (scope=0, type=func, datatype=void, global=1, globalIndex=10)

Generated Bytecode:
0: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
1: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
2: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
3: opcode=0x10 flags=0x0 immediate=0 (encoded: 0x10000000)
4: opcode=0x1 flags=0x0 immediate=500 (encoded: 0x10001f4)
5: opcode=0x14 flags=0x0 immediate=0 (encoded: 0x14000000)
6: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
7: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
8: opcode=0x10 flags=0x0 immediate=0 (encoded: 0x10000000)
9: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
Bytecode saved to: tests/validation_programs/test_simple.bin
Compilation successful!
Compiling: tests/validation_programs/test_error.c
Source code:
int unknownVar;

void test() {
    undefinedFunction(42);
    unknownVariable = 5;
}
Parse tree: (program (declaration (type int) unknownVar ;) (functionDefinition (type void) test ( ) (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall undefinedFunction ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 42)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment unknownVariable = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Declared variable: unknownVar (int)
Compiling function: test
Registered function: test at address 1
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: undefinedFunction (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Error: Undefined variable: unknownVariable
Generated assignment: unknownVariable = <expression>
Error: Undefined function: undefinedFunction
Compilation complete. Generated 5 instructions.
Compilation errors found:
  Undefined variable: unknownVariable
  Undefined function: undefinedFunction
Compiling: tests/validation_programs/test_complex.c
Source code:
int threshold;
int reading;

void monitor() {
    threshold = 512;
    reading = analogRead(0);
    digitalWrite(13, reading);
    printf("Reading: %d, Threshold: %d\n", reading, threshold);
    delay(millis());
}
Parse tree: (program (declaration (type int) threshold ;) (declaration (type int) reading ;) (functionDefinition (type void) monitor ( ) (compoundStatement { (statement (expressionStatement (expression (assignment threshold = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 512))))))))))))))) ;)) (statement (expressionStatement (expression (assignment reading = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall analogRead ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0)))))))))))))) ))))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall digitalWrite ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 13))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression reading)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Reading: %d, Threshold: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression reading))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression threshold)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall delay ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall millis ( )))))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Declared variable: threshold (int)
Declared variable: reading (int)
Compiling function: monitor
Registered function: monitor at address 1
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: threshold = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: reading = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 2 args, string_index=0
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compilation complete. Generated 16 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  threshold (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  reading (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  monitor (scope=0, type=func, datatype=void, global=1, globalIndex=11)

Generated Bytecode:
0: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
1: opcode=0x1 flags=0x0 immediate=512 (encoded: 0x1000200)
2: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
3: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
4: opcode=0x13 flags=0x0 immediate=0 (encoded: 0x13000000)
5: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
6: opcode=0x1 flags=0x0 immediate=13 (encoded: 0x100000d)
7: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
8: opcode=0x10 flags=0x0 immediate=0 (encoded: 0x10000000)
9: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
10: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
11: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
12: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
13: opcode=0x19 flags=0x0 immediate=0 (encoded: 0x19000000)
14: opcode=0x14 flags=0x0 immediate=0 (encoded: 0x14000000)
15: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Reading: %d, Threshold: %d\n"
Bytecode saved to: tests/validation_programs/test_complex.bin
Compilation successful!
Compiling: tests/validation_programs/phase_3_1.c
Source code:
int sensorValue;

void setup() {
    pinMode(13, 1);
    sensorValue = analogRead(0);
    digitalWrite(13, 1);
    printf("Sensor: %d\n", sensorValue);
}
Parse tree: (program (declaration (type int) sensorValue ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall pinMode ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 13))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment sensorValue = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall analogRead ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0)))))))))))))) ))))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall digitalWrite ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 13))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Sensor: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensorValue)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: sensorValue (int)
Compiling function: setup
Registered function: setup at address 2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: sensorValue = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=0
Resolved function call: setup to address 2
Compilation complete. Generated 15 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  sensorValue (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=10)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=13 (encoded: 0x100000d)
3: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
4: opcode=0x17 flags=0x0 immediate=0 (encoded: 0x17000000)
5: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
6: opcode=0x13 flags=0x0 immediate=0 (encoded: 0x13000000)
7: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
8: opcode=0x1 flags=0x0 immediate=13 (encoded: 0x100000d)
9: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
10: opcode=0x10 flags=0x0 immediate=0 (encoded: 0x10000000)
11: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
12: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
13: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
14: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Sensor: %d\n"
Bytecode saved to: tests/validation_programs/phase_3_1.bin
Compilation successful!
Compiling: tests/test_compound_assignment.c
Source code:
// Test compound assignment operators
void setup() {
    int value = 10;
    
    // Test compound addition
    value += 5;  // value should be 15
    printf("After += 5: %d\n", value);
    
    // Test compound subtraction
    value -= 3;  // value should be 12
    printf("After -= 3: %d\n", value);
    
    // Test compound multiplication
    value *= 2;  // value should be 24
    printf("After *= 2: %d\n", value);
    
    // Test compound division
    value /= 4;  // value should be 6
    printf("After /= 4: %d\n", value);
    
    // Test compound modulo
    value %= 5;  // value should be 1
    printf("After %= 5: %d\n", value);
    
    printf("Final value: %d\n", value);
}
Parse tree: (program (functionDefinition (type void) setup ( ) (compoundStatement { (statement (declaration (type int) value = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))) ;)) (statement (expressionStatement (expression (assignment value += (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "After += 5: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression value)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment value -= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "After -= 3: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression value)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment value *= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "After *= 2: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression value)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment value /= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "After /= 4: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression value)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment value %= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "After %= 5: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression value)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Final value: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression value)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Compiling function: setup
Registered function: setup at address 2
Declared variable: value (int)
Initializing variable: value
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: value += <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=0
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: value -= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=1
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: value *= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: value /= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=3
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: value %= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=4
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=5
Resolved function call: setup to address 2
Compilation complete. Generated 43 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=9)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
3: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
4: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
5: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
6: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
7: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
8: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
9: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
10: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
11: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
12: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
13: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
14: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
15: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
16: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
17: opcode=0x18 flags=0x0 immediate=1 (encoded: 0x18000001)
18: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
19: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
20: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
21: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
22: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
23: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
24: opcode=0x18 flags=0x0 immediate=2 (encoded: 0x18000002)
25: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
26: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
27: opcode=0x6 flags=0x0 immediate=0 (encoded: 0x6000000)
28: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
29: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
30: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
31: opcode=0x18 flags=0x0 immediate=3 (encoded: 0x18000003)
32: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
33: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
34: opcode=0x7 flags=0x0 immediate=0 (encoded: 0x7000000)
35: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
36: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
37: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
38: opcode=0x18 flags=0x0 immediate=4 (encoded: 0x18000004)
39: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
40: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
41: opcode=0x18 flags=0x0 immediate=5 (encoded: 0x18000005)
42: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "After += 5: %d\n"
1: "After -= 3: %d\n"
2: "After *= 2: %d\n"
3: "After /= 4: %d\n"
4: "After %= 5: %d\n"
5: "Final value: %d\n"
Bytecode saved to: tests/test_compound_assignment.bin
Compilation successful!
Compiling: tests/comprehensive_functions.c
Source code:
// Comprehensive function test with mixed signatures and Arduino integration
// Tests multiple function addresses, parameter variations, and return types

// Function 1: No parameters, no return (void function)
void initializeLED() {
    pinMode(13, 1);  // Arduino API call
    digitalWrite(13, 0);  // Arduino API call
}

// Function 2: No parameters, int return
int getCurrentTime() {
    return millis();  // Arduino API call
}

// Function 3: Two parameters, no return (void function with params)
void blinkPattern(int pin, int duration) {
    digitalWrite(pin, 1);
    delay(duration);
    digitalWrite(pin, 0);
    delay(duration);
}

// Function 4: Two parameters, int return
int calculateAverage(int value1, int value2) {
    return value1 + value2;  // Will be divided by 2 in caller
}

// Main function using all variations
void setup() {
    // Test void function, no parameters
    initializeLED();
    
    // Test int function, no parameters - used in assignment
    int startTime = getCurrentTime();
    
    // Test void function with parameters
    blinkPattern(13, 100);
    
    // Test int function with parameters - used in arithmetic
    int sum = calculateAverage(10, 20);
    int average = sum / 2;  // This should be 15
    
    // Test function calls in conditional expressions
    if (getCurrentTime() > startTime) {
        blinkPattern(13, 50);
    }
    
    // Mixed Arduino and user function calls
    int sensorValue = analogRead(0);
    if (sensorValue > calculateAverage(256, 512)) {
        initializeLED();
        printf("Sensor high: %d\n", sensorValue);
    }
    
    printf("Average: %d, Time: %d\n", average, getCurrentTime());
}
Parse tree: (program (functionDefinition (type void) initializeLED ( ) (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall pinMode ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 13))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall digitalWrite ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 13))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0)))))))))))))) ))))))))))))))) ;)) })) (functionDefinition (type int) getCurrentTime ( ) (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall millis ( ))))))))))))))) ;)) })) (functionDefinition (type void) blinkPattern ( (parameterList (parameter (type int) pin) , (parameter (type int) duration)) ) (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall digitalWrite ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression pin))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall delay ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression duration)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall digitalWrite ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression pin))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall delay ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression duration)))))))))))))) ))))))))))))))) ;)) })) (functionDefinition (type int) calculateAverage ( (parameterList (parameter (type int) value1) , (parameter (type int) value2)) ) (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression value1)) + (multiplicativeExpression (primaryExpression value2))))))))))))) ;)) })) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall initializeLED ( ))))))))))))))) ;)) (statement (declaration (type int) startTime = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall getCurrentTime ( ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall blinkPattern ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 13))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 100)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) sum = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall calculateAverage ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 20)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) average = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sum) / (primaryExpression 2))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall getCurrentTime ( )))))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression startTime))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall blinkPattern ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 13))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 50)))))))))))))) ))))))))))))))) ;)) })))) (statement (declaration (type int) sensorValue = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall analogRead ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0)))))))))))))) ))))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensorValue)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall calculateAverage ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 256))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 512)))))))))))))) ))))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall initializeLED ( ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Sensor high: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensorValue)))))))))))))) ))))))))))))))) ;)) })))) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Average: %d, Time: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression average))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall getCurrentTime ( )))))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Compiling function: initializeLED
Registered function: initializeLED at address 2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: getCurrentTime
Registered function: getCurrentTime at address 9
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: blinkPattern
Registered function: blinkPattern at address 12
Function parameter: pin (int)
Function parameter: duration (int)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: calculateAverage
Registered function: calculateAverage at address 23
Function parameter: value1 (int)
Function parameter: value2 (int)
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling function: setup
Registered function: setup at address 28
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: initializeLED (placeholder)
Declared variable: startTime (int)
Initializing variable: startTime
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: getCurrentTime (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: blinkPattern (placeholder)
Declared variable: sum (int)
Initializing variable: sum
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: calculateAverage (placeholder)
Declared variable: average (int)
Initializing variable: average
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: getCurrentTime (placeholder)
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: blinkPattern (placeholder)
Declared variable: sensorValue (int)
Initializing variable: sensorValue
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: calculateAverage (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: initializeLED (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=0
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: getCurrentTime (placeholder)
Generated printf call: 2 args, string_index=1
Resolved function call: setup to address 28
Resolved function call: initializeLED to address 2
Resolved function call: getCurrentTime to address 9
Resolved function call: blinkPattern to address 12
Resolved function call: calculateAverage to address 23
Resolved function call: getCurrentTime to address 9
Resolved function call: blinkPattern to address 12
Resolved function call: calculateAverage to address 23
Resolved function call: initializeLED to address 2
Resolved function call: getCurrentTime to address 9
Compilation complete. Generated 67 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  initializeLED (scope=0, type=func, datatype=void, global=1, globalIndex=9)
  getCurrentTime (scope=0, type=func, datatype=int, global=1, globalIndex=10)
  blinkPattern (scope=0, type=func, datatype=void, global=1, globalIndex=11)
  calculateAverage (scope=0, type=func, datatype=int, global=1, globalIndex=12)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=13)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=28 (encoded: 0x800001c)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=13 (encoded: 0x100000d)
3: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
4: opcode=0x17 flags=0x0 immediate=0 (encoded: 0x17000000)
5: opcode=0x1 flags=0x0 immediate=13 (encoded: 0x100000d)
6: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
7: opcode=0x10 flags=0x0 immediate=0 (encoded: 0x10000000)
8: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
9: opcode=0x19 flags=0x0 immediate=0 (encoded: 0x19000000)
10: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
11: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
12: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
13: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
14: opcode=0x10 flags=0x0 immediate=0 (encoded: 0x10000000)
15: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
16: opcode=0x14 flags=0x0 immediate=0 (encoded: 0x14000000)
17: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
18: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
19: opcode=0x10 flags=0x0 immediate=0 (encoded: 0x10000000)
20: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
21: opcode=0x14 flags=0x0 immediate=0 (encoded: 0x14000000)
22: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
23: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
24: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
25: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
26: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
27: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
28: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
29: opcode=0x8 flags=0x0 immediate=9 (encoded: 0x8000009)
30: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
31: opcode=0x1 flags=0x0 immediate=13 (encoded: 0x100000d)
32: opcode=0x1 flags=0x0 immediate=100 (encoded: 0x1000064)
33: opcode=0x8 flags=0x0 immediate=12 (encoded: 0x800000c)
34: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
35: opcode=0x1 flags=0x0 immediate=20 (encoded: 0x1000014)
36: opcode=0x8 flags=0x0 immediate=23 (encoded: 0x8000017)
37: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
38: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
39: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
40: opcode=0x6 flags=0x0 immediate=0 (encoded: 0x6000000)
41: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
42: opcode=0x8 flags=0x0 immediate=9 (encoded: 0x8000009)
43: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
44: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
45: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
46: opcode=0x1 flags=0x0 immediate=13 (encoded: 0x100000d)
47: opcode=0x1 flags=0x0 immediate=50 (encoded: 0x1000032)
48: opcode=0x8 flags=0x0 immediate=12 (encoded: 0x800000c)
49: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
50: opcode=0x13 flags=0x0 immediate=0 (encoded: 0x13000000)
51: opcode=0x53 flags=0x0 immediate=3 (encoded: 0x53000003)
52: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
53: opcode=0x1 flags=0x0 immediate=256 (encoded: 0x1000100)
54: opcode=0x1 flags=0x0 immediate=512 (encoded: 0x1000200)
55: opcode=0x8 flags=0x0 immediate=23 (encoded: 0x8000017)
56: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
57: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
58: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
59: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
60: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
61: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
62: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
63: opcode=0x8 flags=0x0 immediate=9 (encoded: 0x8000009)
64: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
65: opcode=0x18 flags=0x0 immediate=1 (encoded: 0x18000001)
66: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Sensor high: %d\n"
1: "Average: %d, Time: %d\n"
Bytecode saved to: tests/comprehensive_functions.bin
Compilation successful!
Compiling: tests/simple_function.c
Source code:
// Simple function test
int add(int a, int b) {
    return a + b;
}

void setup() {
    int result = add(5, 3);
    printf("Result: %d\n", result);
}
Parse tree: (program (functionDefinition (type int) add ( (parameterList (parameter (type int) a) , (parameter (type int) b)) ) (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)) + (multiplicativeExpression (primaryExpression b))))))))))))) ;)) })) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (declaration (type int) result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall add ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Result: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Compiling function: add
Registered function: add at address 2
Function parameter: a (int)
Function parameter: b (int)
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling function: setup
Registered function: setup at address 7
Declared variable: result (int)
Initializing variable: result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: add (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=0
Resolved function call: setup to address 7
Resolved function call: add to address 2
Compilation complete. Generated 15 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  add (scope=0, type=func, datatype=int, global=1, globalIndex=9)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=10)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=7 (encoded: 0x8000007)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
3: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
4: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
5: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
6: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
7: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
8: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
9: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
10: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
11: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
12: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
13: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
14: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Result: %d\n"
Bytecode saved to: tests/simple_function.bin
Compilation successful!
Compiling: tests/test_control_flow.c
Source code:
// Test program for control flow parsing
int sensor;

void setup() {
    sensor = analogRead(0);
    
    // Test simple if statement
    if (sensor > 512) {
        digitalWrite(13, 1);
    }
    
    // Test if-else statement
    if (sensor < 100) {
        digitalWrite(13, 0);
    } else {
        digitalWrite(13, 1);
    }
    
    // Test while loop
    while (digitalRead(2) == 0) {
        delay(100);
    }
}
Parse tree: (program (declaration (type int) sensor ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment sensor = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall analogRead ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0)))))))))))))) ))))))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensor)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 512))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall digitalWrite ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 13))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1)))))))))))))) ))))))))))))))) ;)) })))) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensor)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 100))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall digitalWrite ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 13))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0)))))))))))))) ))))))))))))))) ;)) })) else (statement (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall digitalWrite ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 13))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1)))))))))))))) ))))))))))))))) ;)) })))) (statement (whileStatement while ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall digitalRead ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2)))))))))))))) )))))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall delay ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 100)))))))))))))) ))))))))))))))) ;)) })))) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: sensor (int)
Compiling function: setup
Registered function: setup at address 2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: sensor = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling while statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Resolved function call: setup to address 2
Compilation complete. Generated 32 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  sensor (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=10)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
3: opcode=0x13 flags=0x0 immediate=0 (encoded: 0x13000000)
4: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
5: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
6: opcode=0x1 flags=0x0 immediate=512 (encoded: 0x1000200)
7: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
8: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
9: opcode=0x1 flags=0x0 immediate=13 (encoded: 0x100000d)
10: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
11: opcode=0x10 flags=0x0 immediate=0 (encoded: 0x10000000)
12: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
13: opcode=0x1 flags=0x0 immediate=100 (encoded: 0x1000064)
14: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
15: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
16: opcode=0x1 flags=0x0 immediate=13 (encoded: 0x100000d)
17: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
18: opcode=0x10 flags=0x0 immediate=0 (encoded: 0x10000000)
19: opcode=0x30 flags=0x0 immediate=3 (encoded: 0x30000003)
20: opcode=0x1 flags=0x0 immediate=13 (encoded: 0x100000d)
21: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
22: opcode=0x10 flags=0x0 immediate=0 (encoded: 0x10000000)
23: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
24: opcode=0x11 flags=0x0 immediate=0 (encoded: 0x11000000)
25: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
26: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
27: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
28: opcode=0x1 flags=0x0 immediate=100 (encoded: 0x1000064)
29: opcode=0x14 flags=0x0 immediate=0 (encoded: 0x14000000)
30: opcode=0x30 flags=0x0 immediate=65528 (encoded: 0x3000fff8)
31: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
Bytecode saved to: tests/test_control_flow.bin
Compilation successful!
Compiling: tests/test_functions.c
Source code:
// Test program for user-defined functions
int add(int a, int b) {
    return a + b;
}

int readSensor() {
    return analogRead(0);
}

void blinkLED(int pin) {
    digitalWrite(pin, 1);
    delay(100);
    digitalWrite(pin, 0);
}

void setup() {
    int result = add(5, 3);
    int sensorValue = readSensor();
    
    if (sensorValue > 512) {
        blinkLED(13);
    }
    
    printf("Result: %d, Sensor: %d\n", result, sensorValue);
}
Parse tree: (program (functionDefinition (type int) add ( (parameterList (parameter (type int) a) , (parameter (type int) b)) ) (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)) + (multiplicativeExpression (primaryExpression b))))))))))))) ;)) })) (functionDefinition (type int) readSensor ( ) (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall analogRead ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0)))))))))))))) ))))))))))))))) ;)) })) (functionDefinition (type void) blinkLED ( (parameterList (parameter (type int) pin)) ) (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall digitalWrite ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression pin))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall delay ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 100)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall digitalWrite ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression pin))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0)))))))))))))) ))))))))))))))) ;)) })) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (declaration (type int) result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall add ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) sensorValue = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall readSensor ( ))))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensorValue)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 512))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall blinkLED ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 13)))))))))))))) ))))))))))))))) ;)) })))) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Result: %d, Sensor: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensorValue)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Compiling function: add
Registered function: add at address 2
Function parameter: a (int)
Function parameter: b (int)
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling function: readSensor
Registered function: readSensor at address 7
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: blinkLED
Registered function: blinkLED at address 11
Function parameter: pin (int)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: setup
Registered function: setup at address 20
Declared variable: result (int)
Initializing variable: result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: add (placeholder)
Declared variable: sensorValue (int)
Initializing variable: sensorValue
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: readSensor (placeholder)
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: blinkLED (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 2 args, string_index=0
Resolved function call: setup to address 20
Resolved function call: add to address 2
Resolved function call: readSensor to address 7
Resolved function call: blinkLED to address 11
Compilation complete. Generated 37 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  add (scope=0, type=func, datatype=int, global=1, globalIndex=9)
  readSensor (scope=0, type=func, datatype=int, global=1, globalIndex=10)
  blinkLED (scope=0, type=func, datatype=void, global=1, globalIndex=11)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=12)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=20 (encoded: 0x8000014)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
3: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
4: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
5: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
6: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
7: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
8: opcode=0x13 flags=0x0 immediate=0 (encoded: 0x13000000)
9: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
10: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
11: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
12: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
13: opcode=0x10 flags=0x0 immediate=0 (encoded: 0x10000000)
14: opcode=0x1 flags=0x0 immediate=100 (encoded: 0x1000064)
15: opcode=0x14 flags=0x0 immediate=0 (encoded: 0x14000000)
16: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
17: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
18: opcode=0x10 flags=0x0 immediate=0 (encoded: 0x10000000)
19: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
20: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
21: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
22: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
23: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
24: opcode=0x8 flags=0x0 immediate=7 (encoded: 0x8000007)
25: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
26: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
27: opcode=0x1 flags=0x0 immediate=512 (encoded: 0x1000200)
28: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
29: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
30: opcode=0x1 flags=0x0 immediate=13 (encoded: 0x100000d)
31: opcode=0x8 flags=0x0 immediate=11 (encoded: 0x800000b)
32: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
33: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
34: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
35: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
36: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Result: %d, Sensor: %d\n"
Bytecode saved to: tests/test_functions.bin
Compilation successful!
Compiling: tests/test_bitwise_operators.c
Source code:
/*
 * Test program for bitwise operators (&, |, ^, ~, <<, >>)
 * Tests bitwise operations and compound assignments
 */

int a;
int b;
int result;

void setup() {
    // Test bitwise AND (&)
    a = 12;  // 1100 in binary
    b = 10;  // 1010 in binary
    result = a & b;  // Should be 8 (1000 in binary)
    printf("12 & 10 = %d\n", result);
    
    // Test bitwise OR (|)
    a = 12;  // 1100 in binary
    b = 10;  // 1010 in binary
    result = a | b;  // Should be 14 (1110 in binary)
    printf("12 | 10 = %d\n", result);
    
    // Test bitwise XOR (^)
    a = 12;  // 1100 in binary
    b = 10;  // 1010 in binary
    result = a ^ b;  // Should be 6 (0110 in binary)
    printf("12 ^ 10 = %d\n", result);
    
    // Test bitwise NOT (~)
    a = 12;  // 1100 in binary
    result = ~a;  // Should be -13 (two's complement)
    printf("~12 = %d\n", result);
    
    // Test left shift (<<)
    a = 5;   // 101 in binary
    result = a << 2;  // Should be 20 (10100 in binary)
    printf("5 << 2 = %d\n", result);
    
    // Test right shift (>>)
    a = 20;  // 10100 in binary
    result = a >> 2;  // Should be 5 (101 in binary)
    printf("20 >> 2 = %d\n", result);
    
    // Test compound bitwise AND (&=)
    a = 15;  // 1111 in binary
    a &= 7;  // 0111 in binary, result should be 7
    printf("15 &= 7 gives %d\n", a);
    
    // Test compound bitwise OR (|=)
    a = 8;   // 1000 in binary
    a |= 4;  // 0100 in binary, result should be 12 (1100)
    printf("8 |= 4 gives %d\n", a);
    
    // Test compound bitwise XOR (^=)
    a = 12;  // 1100 in binary
    a ^= 6;  // 0110 in binary, result should be 10 (1010)
    printf("12 ^= 6 gives %d\n", a);
    
    // Test compound left shift (<<=)
    a = 3;   // 11 in binary
    a <<= 2; // Should be 12 (1100 in binary)
    printf("3 <<= 2 gives %d\n", a);
    
    // Test compound right shift (>>=)
    a = 24;  // 11000 in binary
    a >>= 3; // Should be 3 (11 in binary)
    printf("24 >>= 3 gives %d\n", a);
    
    // Test precedence and combinations
    a = 5;
    b = 3;
    result = a & b | 4;  // (5 & 3) | 4 = 1 | 4 = 5
    printf("5 & 3 | 4 = %d\n", result);
    
    result = a ^ b & 7;  // a ^ (b & 7) = 5 ^ (3 & 7) = 5 ^ 3 = 6
    printf("5 ^ 3 & 7 = %d\n", result);
}
Parse tree: (program (declaration (type int) a ;) (declaration (type int) b ;) (declaration (type int) result ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 12))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))) & (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "12 & 10 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 12))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "12 | 10 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 12))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))) ^ (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "12 ^ 10 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 12))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression ~ (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "~12 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))) << (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "5 << 2 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 20))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))) >> (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "20 >> 2 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 15))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a &= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 7))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "15 &= 7 gives %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 8))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a |= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "8 |= 4 gives %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 12))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a ^= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 6))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "12 ^= 6 gives %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a <<= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "3 <<= 2 gives %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 24))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a >>= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "24 >>= 3 gives %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))) & (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "5 & 3 | 4 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))) ^ (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))) & (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 7))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "5 ^ 3 & 7 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: a (int)
Declared variable: b (int)
Declared variable: result (int)
Compiling function: setup
Registered function: setup at address 2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=0
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=1
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=3
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=4
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=5
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: a &= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=6
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: a |= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=7
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: a ^= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=8
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: a <<= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=9
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: a >>= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=10
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=11
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=12
Resolved function call: setup to address 2
Compilation complete. Generated 129 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  a (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  b (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  result (scope=0, type=var, datatype=int, global=1, globalIndex=11)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=12)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=12 (encoded: 0x100000c)
3: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
4: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
5: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
6: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
7: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
8: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
9: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
10: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
11: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
12: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
13: opcode=0x1 flags=0x0 immediate=12 (encoded: 0x100000c)
14: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
15: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
16: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
17: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
18: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
19: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
20: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
21: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
22: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
23: opcode=0x18 flags=0x0 immediate=1 (encoded: 0x18000001)
24: opcode=0x1 flags=0x0 immediate=12 (encoded: 0x100000c)
25: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
26: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
27: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
28: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
29: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
30: opcode=0x62 flags=0x0 immediate=0 (encoded: 0x62000000)
31: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
32: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
33: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
34: opcode=0x18 flags=0x0 immediate=2 (encoded: 0x18000002)
35: opcode=0x1 flags=0x0 immediate=12 (encoded: 0x100000c)
36: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
37: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
38: opcode=0x63 flags=0x0 immediate=0 (encoded: 0x63000000)
39: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
40: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
41: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
42: opcode=0x18 flags=0x0 immediate=3 (encoded: 0x18000003)
43: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
44: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
45: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
46: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
47: opcode=0x64 flags=0x0 immediate=0 (encoded: 0x64000000)
48: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
49: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
50: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
51: opcode=0x18 flags=0x0 immediate=4 (encoded: 0x18000004)
52: opcode=0x1 flags=0x0 immediate=20 (encoded: 0x1000014)
53: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
54: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
55: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
56: opcode=0x65 flags=0x0 immediate=0 (encoded: 0x65000000)
57: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
58: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
59: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
60: opcode=0x18 flags=0x0 immediate=5 (encoded: 0x18000005)
61: opcode=0x1 flags=0x0 immediate=15 (encoded: 0x100000f)
62: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
63: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
64: opcode=0x1 flags=0x0 immediate=7 (encoded: 0x1000007)
65: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
66: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
67: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
68: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
69: opcode=0x18 flags=0x0 immediate=6 (encoded: 0x18000006)
70: opcode=0x1 flags=0x0 immediate=8 (encoded: 0x1000008)
71: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
72: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
73: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
74: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
75: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
76: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
77: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
78: opcode=0x18 flags=0x0 immediate=7 (encoded: 0x18000007)
79: opcode=0x1 flags=0x0 immediate=12 (encoded: 0x100000c)
80: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
81: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
82: opcode=0x1 flags=0x0 immediate=6 (encoded: 0x1000006)
83: opcode=0x62 flags=0x0 immediate=0 (encoded: 0x62000000)
84: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
85: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
86: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
87: opcode=0x18 flags=0x0 immediate=8 (encoded: 0x18000008)
88: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
89: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
90: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
91: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
92: opcode=0x64 flags=0x0 immediate=0 (encoded: 0x64000000)
93: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
94: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
95: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
96: opcode=0x18 flags=0x0 immediate=9 (encoded: 0x18000009)
97: opcode=0x1 flags=0x0 immediate=24 (encoded: 0x1000018)
98: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
99: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
100: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
101: opcode=0x65 flags=0x0 immediate=0 (encoded: 0x65000000)
102: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
103: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
104: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
105: opcode=0x18 flags=0x0 immediate=10 (encoded: 0x1800000a)
106: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
107: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
108: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
109: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
110: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
111: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
112: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
113: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
114: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
115: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
116: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
117: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
118: opcode=0x18 flags=0x0 immediate=11 (encoded: 0x1800000b)
119: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
120: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
121: opcode=0x1 flags=0x0 immediate=7 (encoded: 0x1000007)
122: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
123: opcode=0x62 flags=0x0 immediate=0 (encoded: 0x62000000)
124: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
125: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
126: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
127: opcode=0x18 flags=0x0 immediate=12 (encoded: 0x1800000c)
128: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "12 & 10 = %d\n"
1: "12 | 10 = %d\n"
2: "12 ^ 10 = %d\n"
3: "~12 = %d\n"
4: "5 << 2 = %d\n"
5: "20 >> 2 = %d\n"
6: "15 &= 7 gives %d\n"
7: "8 |= 4 gives %d\n"
8: "12 ^= 6 gives %d\n"
9: "3 <<= 2 gives %d\n"
10: "24 >>= 3 gives %d\n"
11: "5 & 3 | 4 = %d\n"
12: "5 ^ 3 & 7 = %d\n"
Bytecode saved to: tests/test_bitwise_operators.bin
Compilation successful!
Compiling: tests/test_logical_operators.c
Source code:
/*
 * Test program for logical operators (&&, ||, !)
 * Tests short-circuit evaluation and precedence
 */

int a;
int b;
int result;

void setup() {
    // Test logical AND (&&)
    a = 1;
    b = 1;
    result = a && b;  // Should be 1 (true)
    printf("1 && 1 = %d\n", result);
    
    a = 1;
    b = 0;
    result = a && b;  // Should be 0 (false)
    printf("1 && 0 = %d\n", result);
    
    a = 0;
    b = 1;
    result = a && b;  // Should be 0 (false, short-circuit)
    printf("0 && 1 = %d\n", result);
    
    // Test logical OR (||)
    a = 0;
    b = 0;
    result = a || b;  // Should be 0 (false)
    printf("0 || 0 = %d\n", result);
    
    a = 1;
    b = 0;
    result = a || b;  // Should be 1 (true, short-circuit)
    printf("1 || 0 = %d\n", result);
    
    a = 0;
    b = 1;
    result = a || b;  // Should be 1 (true)
    printf("0 || 1 = %d\n", result);
    
    // Test logical NOT (!)
    a = 1;
    result = !a;  // Should be 0 (false)
    printf("!1 = %d\n", result);
    
    a = 0;
    result = !a;  // Should be 1 (true)
    printf("!0 = %d\n", result);
    
    // Test compound logical expressions
    a = 1;
    b = 0;
    result = a && !b;  // Should be 1 (true)
    printf("1 && !0 = %d\n", result);
    
    result = !a || b;  // Should be 0 (false)
    printf("!1 || 0 = %d\n", result);
    
    // Test precedence: ! has higher precedence than && and ||
    a = 1;
    b = 0;
    result = !a && b;  // Should be 0 (!1 = 0, 0 && 0 = 0)
    printf("!1 && 0 = %d\n", result);
    
    result = a || !b;  // Should be 1 (1 || !0 = 1 || 1 = 1)
    printf("1 || !0 = %d\n", result);
}
Parse tree: (program (declaration (type int) a ;) (declaration (type int) b ;) (declaration (type int) result ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "1 && 1 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "1 && 0 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "0 && 1 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))) || (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "0 || 0 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))) || (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "1 || 0 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))) || (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "0 || 1 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression ! (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "!1 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression ! (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "!0 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))))) && (logicalNotExpression ! (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b)))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "1 && !0 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression ! (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))))))) || (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "!1 || 0 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression ! (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "!1 && 0 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))) || (logicalAndExpression (logicalNotExpression ! (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b)))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "1 || !0 = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: a (int)
Declared variable: b (int)
Declared variable: result (int)
Compiling function: setup
Registered function: setup at address 2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=0
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=1
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=3
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=4
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=5
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=6
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=7
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=8
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=9
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=10
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=11
Resolved function call: setup to address 2
Compilation complete. Generated 155 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  a (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  b (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  result (scope=0, type=var, datatype=int, global=1, globalIndex=11)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=12)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
3: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
4: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
5: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
6: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
7: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
8: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
9: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
10: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
11: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
12: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
13: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
14: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
15: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
16: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
17: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
18: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
19: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
20: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
21: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
22: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
23: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
24: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
25: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
26: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
27: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
28: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
29: opcode=0x18 flags=0x0 immediate=1 (encoded: 0x18000001)
30: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
31: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
32: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
33: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
34: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
35: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
36: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
37: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
38: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
39: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
40: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
41: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
42: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
43: opcode=0x18 flags=0x0 immediate=2 (encoded: 0x18000002)
44: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
45: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
46: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
47: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
48: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
49: opcode=0x31 flags=0x0 immediate=2 (encoded: 0x31000002)
50: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
51: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
52: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
53: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
54: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
55: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
56: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
57: opcode=0x18 flags=0x0 immediate=3 (encoded: 0x18000003)
58: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
59: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
60: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
61: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
62: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
63: opcode=0x31 flags=0x0 immediate=2 (encoded: 0x31000002)
64: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
65: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
66: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
67: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
68: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
69: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
70: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
71: opcode=0x18 flags=0x0 immediate=4 (encoded: 0x18000004)
72: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
73: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
74: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
75: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
76: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
77: opcode=0x31 flags=0x0 immediate=2 (encoded: 0x31000002)
78: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
79: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
80: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
81: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
82: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
83: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
84: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
85: opcode=0x18 flags=0x0 immediate=5 (encoded: 0x18000005)
86: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
87: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
88: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
89: opcode=0x42 flags=0x0 immediate=0 (encoded: 0x42000000)
90: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
91: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
92: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
93: opcode=0x18 flags=0x0 immediate=6 (encoded: 0x18000006)
94: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
95: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
96: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
97: opcode=0x42 flags=0x0 immediate=0 (encoded: 0x42000000)
98: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
99: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
100: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
101: opcode=0x18 flags=0x0 immediate=7 (encoded: 0x18000007)
102: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
103: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
104: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
105: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
106: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
107: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
108: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
109: opcode=0x42 flags=0x0 immediate=0 (encoded: 0x42000000)
110: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
111: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
112: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
113: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
114: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
115: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
116: opcode=0x18 flags=0x0 immediate=8 (encoded: 0x18000008)
117: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
118: opcode=0x42 flags=0x0 immediate=0 (encoded: 0x42000000)
119: opcode=0x31 flags=0x0 immediate=2 (encoded: 0x31000002)
120: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
121: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
122: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
123: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
124: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
125: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
126: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
127: opcode=0x18 flags=0x0 immediate=9 (encoded: 0x18000009)
128: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
129: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
130: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
131: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
132: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
133: opcode=0x42 flags=0x0 immediate=0 (encoded: 0x42000000)
134: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
135: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
136: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
137: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
138: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
139: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
140: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
141: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
142: opcode=0x18 flags=0x0 immediate=10 (encoded: 0x1800000a)
143: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
144: opcode=0x31 flags=0x0 immediate=3 (encoded: 0x31000003)
145: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
146: opcode=0x42 flags=0x0 immediate=0 (encoded: 0x42000000)
147: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
148: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
149: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
150: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
151: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
152: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
153: opcode=0x18 flags=0x0 immediate=11 (encoded: 0x1800000b)
154: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "1 && 1 = %d\n"
1: "1 && 0 = %d\n"
2: "0 && 1 = %d\n"
3: "0 || 0 = %d\n"
4: "1 || 0 = %d\n"
5: "0 || 1 = %d\n"
6: "!1 = %d\n"
7: "!0 = %d\n"
8: "1 && !0 = %d\n"
9: "!1 || 0 = %d\n"
10: "!1 && 0 = %d\n"
11: "1 || !0 = %d\n"
Bytecode saved to: tests/test_logical_operators.bin
Compilation successful!
Compiling: tests/test_simple_bitwise.c
Source code:
int a;
int b;
int result;

void setup() {
    a = 12;
    b = 10;
    result = 8;
    printf("Test complete\n");
}
Parse tree: (program (declaration (type int) a ;) (declaration (type int) b ;) (declaration (type int) result ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 12))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 8))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Test complete\n")))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: a (int)
Declared variable: b (int)
Declared variable: result (int)
Compiling function: setup
Registered function: setup at address 2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 0 args, string_index=0
Resolved function call: setup to address 2
Compilation complete. Generated 11 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  a (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  b (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  result (scope=0, type=var, datatype=int, global=1, globalIndex=11)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=12)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=12 (encoded: 0x100000c)
3: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
4: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
5: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
6: opcode=0x1 flags=0x0 immediate=8 (encoded: 0x1000008)
7: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
8: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
9: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
10: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Test complete\n"
Bytecode saved to: tests/test_simple_bitwise.bin
Compilation successful!
Compiling: tests/test_single_bitwise.c
Source code:
int a;
int b;
int result;

void setup() {
    a = 12;
    b = 10;
    result = a & b;
    printf("Result: %d\n", result);
}
Parse tree: (program (declaration (type int) a ;) (declaration (type int) b ;) (declaration (type int) result ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 12))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))) & (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Result: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: a (int)
Declared variable: b (int)
Declared variable: result (int)
Compiling function: setup
Registered function: setup at address 2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=0
Resolved function call: setup to address 2
Compilation complete. Generated 14 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  a (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  b (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  result (scope=0, type=var, datatype=int, global=1, globalIndex=11)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=12)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=12 (encoded: 0x100000c)
3: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
4: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
5: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
6: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
7: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
8: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
9: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
10: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
11: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
12: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
13: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Result: %d\n"
Bytecode saved to: tests/test_single_bitwise.bin
Compilation successful!
Compiling: tests/test_basic_arithmetic.c
Source code:
/*
 * Basic Arithmetic Test
 * Tests fundamental arithmetic operations and operator precedence
 */

int a;
int b; 
int result;

void setup() {
    // Basic arithmetic operations
    a = 10;
    b = 5;
    
    // Addition
    result = a + b;  // Should be 15
    
    // Subtraction  
    result = a - b;  // Should be 5
    
    // Multiplication
    result = a * b;  // Should be 50
    
    // Division
    result = a / b;  // Should be 2
    
    // Modulo
    result = a % b;  // Should be 0
    
    // Simple arithmetic expressions only
    result = a + 2;  // Simple addition
    result = b * 3;  // Simple multiplication
    
    printf("Basic arithmetic test complete\n");
}
Parse tree: (program (declaration (type int) a ;) (declaration (type int) b ;) (declaration (type int) result ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)) + (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)) - (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a) * (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a) / (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a) % (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)) + (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b) * (primaryExpression 3))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Basic arithmetic test complete\n")))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: a (int)
Declared variable: b (int)
Declared variable: result (int)
Compiling function: setup
Registered function: setup at address 2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 0 args, string_index=0
Resolved function call: setup to address 2
Compilation complete. Generated 37 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  a (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  b (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  result (scope=0, type=var, datatype=int, global=1, globalIndex=11)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=12)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
3: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
4: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
5: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
6: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
7: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
8: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
9: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
10: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
11: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
12: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
13: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
14: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
15: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
16: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
17: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
18: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
19: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
20: opcode=0x6 flags=0x0 immediate=0 (encoded: 0x6000000)
21: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
22: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
23: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
24: opcode=0x7 flags=0x0 immediate=0 (encoded: 0x7000000)
25: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
26: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
27: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
28: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
29: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
30: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
31: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
32: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
33: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
34: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
35: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
36: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Basic arithmetic test complete\n"
Bytecode saved to: tests/test_basic_arithmetic.bin
Compilation successful!
Compiling: tests/test_basic_assignments.c
Source code:
/*
 * Basic Assignment Test
 * Tests variable assignments and compound assignment operators
 */

int x;
int y;
int z;

void setup() {
    // Basic assignment
    x = 10;
    y = x;  // Copy assignment
    
    // Compound assignments
    x += 5;   // x = 15
    x -= 3;   // x = 12
    x *= 2;   // x = 24
    x /= 4;   // x = 6
    x %= 5;   // x = 1
    
    // Chain assignments through expressions
    y = x + 10;  // y = 11
    z = y - x;   // z = 10
    
    // Self-assignment patterns
    x = x + 1;   // x = 2
    y = y * 2;   // y = 22
    
    printf("Assignment test complete: x=%d, y=%d, z=%d\n", x, y, z);
}
Parse tree: (program (declaration (type int) x ;) (declaration (type int) y ;) (declaration (type int) z ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment x = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))))) ;)) (statement (expressionStatement (expression (assignment y = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression x))))))))))))))) ;)) (statement (expressionStatement (expression (assignment x += (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))))) ;)) (statement (expressionStatement (expression (assignment x -= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))))) ;)) (statement (expressionStatement (expression (assignment x *= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) (statement (expressionStatement (expression (assignment x /= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4))))))))))))))) ;)) (statement (expressionStatement (expression (assignment x %= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))))) ;)) (statement (expressionStatement (expression (assignment y = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression x)) + (multiplicativeExpression (primaryExpression 10))))))))))))))) ;)) (statement (expressionStatement (expression (assignment z = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression y)) - (multiplicativeExpression (primaryExpression x))))))))))))))) ;)) (statement (expressionStatement (expression (assignment x = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression x)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment y = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression y) * (primaryExpression 2))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Assignment test complete: x=%d, y=%d, z=%d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression x))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression y))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression z)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: x (int)
Declared variable: y (int)
Declared variable: z (int)
Compiling function: setup
Registered function: setup at address 2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: x = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: y = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: x += <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: x -= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: x *= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: x /= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: x %= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: y = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: z = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: x = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: y = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 3 args, string_index=0
Resolved function call: setup to address 2
Compilation complete. Generated 48 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  x (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  y (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  z (scope=0, type=var, datatype=int, global=1, globalIndex=11)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=12)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
3: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
4: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
5: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
6: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
7: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
8: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
9: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
10: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
11: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
12: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
13: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
14: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
15: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
16: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
17: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
18: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
19: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
20: opcode=0x6 flags=0x0 immediate=0 (encoded: 0x6000000)
21: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
22: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
23: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
24: opcode=0x7 flags=0x0 immediate=0 (encoded: 0x7000000)
25: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
26: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
27: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
28: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
29: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
30: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
31: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
32: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
33: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
34: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
35: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
36: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
37: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
38: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
39: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
40: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
41: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
42: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
43: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
44: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
45: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
46: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
47: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Assignment test complete: x=%d, y=%d, z=%d\n"
Bytecode saved to: tests/test_basic_assignments.bin
Compilation successful!
Compiling: tests/test_basic_control_flow.c
Source code:
/*
 * Basic Control Flow Test
 * Tests if/else statements and while loops
 */

int counter;
int result;

void setup() {
    // Simple assignments and function calls only for now
    counter = 5;
    result = 1;
    
    // Basic variable operations
    counter = 3;
    result = 0;
    
    // Simple arithmetic
    result = counter + 1;
    counter = counter - 1;
    
    printf("Control flow test: result=%d, counter=%d\n", result, counter);
}
Parse tree: (program (declaration (type int) counter ;) (declaration (type int) result ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment counter = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment counter = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression counter)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment counter = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression counter)) - (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Control flow test: result=%d, counter=%d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression counter)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: counter (int)
Declared variable: result (int)
Compiling function: setup
Registered function: setup at address 2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: counter = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: counter = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: counter = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 2 args, string_index=0
Resolved function call: setup to address 2
Compilation complete. Generated 23 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  counter (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  result (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=11)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
3: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
4: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
5: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
6: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
7: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
8: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
9: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
10: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
11: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
12: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
13: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
14: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
15: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
16: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
17: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
18: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
19: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
20: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
21: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
22: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Control flow test: result=%d, counter=%d\n"
Bytecode saved to: tests/test_basic_control_flow.bin
Compilation successful!
Compiling: tests/test_basic_functions.c
Source code:
/*
 * Basic Functions Test
 * Tests function definitions, calls, parameters, and return values
 */

int value;

int add_numbers(int a, int b) {
    return a + b;
}

int multiply_by_two(int x) {
    return x * 2;
}

void set_global_value(int new_value) {
    value = new_value;
}

int get_constant() {
    return 99;
}

void setup() {
    // Test function with parameters and return
    int sum = add_numbers(10, 20);  // Should be 30
    
    // Test function call with variable
    int doubled = multiply_by_two(sum);  // Should be 60
    
    // Test void function that modifies global
    set_global_value(doubled);  // value = 60
    
    // Test parameterless function
    int constant = get_constant();  // Should be 99
    
    // Test nested function calls
    int nested = add_numbers(constant, multiply_by_two(5));  // 99 + 10 = 109
    
    printf("Functions test: sum=%d, doubled=%d, value=%d, nested=%d\n", 
           sum, doubled, value, nested);
}
Parse tree: (program (declaration (type int) value ;) (functionDefinition (type int) add_numbers ( (parameterList (parameter (type int) a) , (parameter (type int) b)) ) (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)) + (multiplicativeExpression (primaryExpression b))))))))))))) ;)) })) (functionDefinition (type int) multiply_by_two ( (parameterList (parameter (type int) x)) ) (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression x) * (primaryExpression 2))))))))))))) ;)) })) (functionDefinition (type void) set_global_value ( (parameterList (parameter (type int) new_value)) ) (compoundStatement { (statement (expressionStatement (expression (assignment value = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression new_value))))))))))))))) ;)) })) (functionDefinition (type int) get_constant ( ) (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 99))))))))))))) ;)) })) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (declaration (type int) sum = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall add_numbers ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 20)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) doubled = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall multiply_by_two ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sum)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall set_global_value ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression doubled)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) constant = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall get_constant ( ))))))))))))))) ;)) (statement (declaration (type int) nested = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall add_numbers ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression constant))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall multiply_by_two ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5)))))))))))))) )))))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Functions test: sum=%d, doubled=%d, value=%d, nested=%d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sum))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression doubled))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression value))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression nested)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: value (int)
Compiling function: add_numbers
Registered function: add_numbers at address 2
Function parameter: a (int)
Function parameter: b (int)
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling function: multiply_by_two
Registered function: multiply_by_two at address 7
Function parameter: x (int)
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: set_global_value
Registered function: set_global_value at address 12
Function parameter: new_value (int)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: value = <expression>
Compiling function: get_constant
Registered function: get_constant at address 15
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: setup
Registered function: setup at address 18
Declared variable: sum (int)
Initializing variable: sum
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: add_numbers (placeholder)
Declared variable: doubled (int)
Initializing variable: doubled
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: multiply_by_two (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: set_global_value (placeholder)
Declared variable: constant (int)
Initializing variable: constant
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: get_constant (placeholder)
Declared variable: nested (int)
Initializing variable: nested
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: multiply_by_two (placeholder)
Generated function call: add_numbers (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 4 args, string_index=0
Resolved function call: setup to address 18
Resolved function call: add_numbers to address 2
Resolved function call: multiply_by_two to address 7
Resolved function call: set_global_value to address 12
Resolved function call: get_constant to address 15
Resolved function call: multiply_by_two to address 7
Resolved function call: add_numbers to address 2
Compilation complete. Generated 41 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  value (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  add_numbers (scope=0, type=func, datatype=int, global=1, globalIndex=10)
  multiply_by_two (scope=0, type=func, datatype=int, global=1, globalIndex=11)
  set_global_value (scope=0, type=func, datatype=void, global=1, globalIndex=12)
  get_constant (scope=0, type=func, datatype=int, global=1, globalIndex=13)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=14)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=18 (encoded: 0x8000012)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
3: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
4: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
5: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
6: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
7: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
8: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
9: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
10: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
11: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
12: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
13: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
14: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
15: opcode=0x1 flags=0x0 immediate=99 (encoded: 0x1000063)
16: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
17: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
18: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
19: opcode=0x1 flags=0x0 immediate=20 (encoded: 0x1000014)
20: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
21: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
22: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
23: opcode=0x8 flags=0x0 immediate=7 (encoded: 0x8000007)
24: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
25: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
26: opcode=0x8 flags=0x0 immediate=12 (encoded: 0x800000c)
27: opcode=0x8 flags=0x0 immediate=15 (encoded: 0x800000f)
28: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
29: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
30: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
31: opcode=0x8 flags=0x0 immediate=7 (encoded: 0x8000007)
32: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
33: opcode=0x53 flags=0x0 immediate=3 (encoded: 0x53000003)
34: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
35: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
36: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
37: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
38: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
39: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
40: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Functions test: sum=%d, doubled=%d, value=%d, nested=%d\n"
Bytecode saved to: tests/test_basic_functions.bin
Compilation successful!
Compiling: tests/test_basic_variables.c
Source code:
/*
 * Basic Variables Test  
 * Tests variable declaration, initialization, and scope
 */

int global_var;
int initialized_var = 42;

void setup() {
    // Test global variable access
    global_var = 100;
    
    // Test initialized variable
    int local_result = initialized_var;  // Should be 42
    
    // Test variable reuse
    global_var = global_var + initialized_var;  // 100 + 42 = 142
    
    // Test multiple operations on same variable
    local_result = local_result * 2;  // 42 * 2 = 84
    local_result = local_result - 4;  // 84 - 4 = 80
    
    printf("Variables test: global=%d, local=%d\n", global_var, local_result);
}
Parse tree: (program (declaration (type int) global_var ;) (declaration (type int) initialized_var = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 42))))))))))))) ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment global_var = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 100))))))))))))))) ;)) (statement (declaration (type int) local_result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression initialized_var))))))))))))) ;)) (statement (expressionStatement (expression (assignment global_var = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression global_var)) + (multiplicativeExpression (primaryExpression initialized_var))))))))))))))) ;)) (statement (expressionStatement (expression (assignment local_result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression local_result) * (primaryExpression 2))))))))))))))) ;)) (statement (expressionStatement (expression (assignment local_result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression local_result)) - (multiplicativeExpression (primaryExpression 4))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Variables test: global=%d, local=%d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression global_var))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression local_result)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: global_var (int)
Declared variable: initialized_var (int)
Initializing variable: initialized_var
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: setup
Registered function: setup at address 4
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: global_var = <expression>
Declared variable: local_result (int)
Initializing variable: local_result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: global_var = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: local_result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: local_result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 2 args, string_index=0
Resolved function call: setup to address 4
Compilation complete. Generated 25 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  global_var (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  initialized_var (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=11)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=4 (encoded: 0x8000004)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=42 (encoded: 0x100002a)
3: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
4: opcode=0x1 flags=0x0 immediate=100 (encoded: 0x1000064)
5: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
6: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
7: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
8: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
9: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
10: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
11: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
12: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
13: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
14: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
15: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
16: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
17: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
18: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
19: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
20: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
21: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
22: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
23: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
24: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Variables test: global=%d, local=%d\n"
Bytecode saved to: tests/test_basic_variables.bin
Compilation successful!
Compiling: tests/test_complex_control_flow.c
Source code:
/*
 * Complex Control Flow Test
 * Tests deeply nested control structures and edge cases
 */

int state;
int result;
int iteration_count;

int complex_decision_tree(int input) {
    if (input > 50) {
        if (input > 75) {
            if (input > 90) {
                return 4;  // Very high
            } else {
                return 3;  // High
            }
        } else {
            return 2;  // Medium-high
        }
    } else {
        if (input > 25) {
            return 1;  // Medium
        } else {
            if (input > 10) {
                return 0;  // Low
            } else {
                return -1; // Very low
            }
        }
    }
}

void nested_loops_with_conditions() {
    int outer = 0;
    result = 0;
    
    while (outer < 5) {
        int inner = 0;
        while (inner < 3) {
            if ((outer + inner) % 2 == 0) {
                result = result + 1;
            } else {
                if (outer > inner) {
                    result = result + 2;
                }
            }
            inner = inner + 1;
        }
        outer = outer + 1;
    }
    // Complex calculation result should be consistent
}

void state_machine_simulation() {
    state = 0;
    iteration_count = 0;
    
    while (iteration_count < 10) {
        if (state == 0) {
            if (iteration_count % 3 == 0) {
                state = 1;
            } else {
                state = 2;
            }
        } else if (state == 1) {
            if (iteration_count > 5) {
                state = 3;
            } else {
                state = 0;
            }
        } else if (state == 2) {
            state = 0;
        } else {
            // state == 3
            if (iteration_count < 8) {
                state = 1;
            } else {
                state = 0;
            }
        }
        iteration_count = iteration_count + 1;
    }
}

void setup() {
    // Test complex decision tree
    int decision1 = complex_decision_tree(95);  // Should be 4
    int decision2 = complex_decision_tree(30);  // Should be 1
    int decision3 = complex_decision_tree(5);   // Should be -1
    
    // Test nested loops with complex conditions
    nested_loops_with_conditions();
    int loop_result = result;
    
    // Test state machine with multiple transitions
    state_machine_simulation();
    int final_state = state;
    
    // Test control flow with function calls
    int combined_decision = 0;
    if (decision1 > decision2) {
        if (complex_decision_tree(loop_result) >= 0) {
            combined_decision = 1;
        }
    }
    
    printf("Complex control flow: d1=%d, d2=%d, d3=%d, loops=%d, state=%d\n",
           decision1, decision2, decision3, loop_result, final_state);
}
Parse tree: (program (declaration (type int) state ;) (declaration (type int) result ;) (declaration (type int) iteration_count ;) (functionDefinition (type int) complex_decision_tree ( (parameterList (parameter (type int) input)) ) (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression input)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 50))))))))))))) ) (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression input)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 75))))))))))))) ) (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression input)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 90))))))))))))) ) (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4))))))))))))) ;)) })) else (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))) ;)) })))) })) else (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))) ;)) })))) })) else (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression input)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 25))))))))))))) ) (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ;)) })) else (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression input)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))) ) (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) })) else (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression - 1))))))))))))) ;)) })))) })))) })))) })) (functionDefinition (type void) nested_loops_with_conditions ( ) (compoundStatement { (statement (declaration (type int) outer = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (whileStatement while ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression outer)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))) ) (statement (compoundStatement { (statement (declaration (type int) inner = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (whileStatement while ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression inner)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))) ) (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression outer)) + (multiplicativeExpression (primaryExpression inner))))))))))))) )) % (primaryExpression 2)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })) else (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression outer)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression inner))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)) + (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) })))) })))) (statement (expressionStatement (expression (assignment inner = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression inner)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) (statement (expressionStatement (expression (assignment outer = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression outer)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) })) (functionDefinition (type void) state_machine_simulation ( ) (compoundStatement { (statement (expressionStatement (expression (assignment state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment iteration_count = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (whileStatement while ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression iteration_count)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))) ) (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression state)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression iteration_count) % (primaryExpression 3)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })) else (statement (compoundStatement { (statement (expressionStatement (expression (assignment state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) })))) })) else (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression state)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ) (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression iteration_count)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))))) ;)) })) else (statement (compoundStatement { (statement (expressionStatement (expression (assignment state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) })))) })) else (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression state)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) })) else (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression iteration_count)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 8))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })) else (statement (compoundStatement { (statement (expressionStatement (expression (assignment state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) })))) })))))))) (statement (expressionStatement (expression (assignment iteration_count = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression iteration_count)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) })) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (declaration (type int) decision1 = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall complex_decision_tree ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 95)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) decision2 = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall complex_decision_tree ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 30)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) decision3 = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall complex_decision_tree ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall nested_loops_with_conditions ( ))))))))))))))) ;)) (statement (declaration (type int) loop_result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall state_machine_simulation ( ))))))))))))))) ;)) (statement (declaration (type int) final_state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression state))))))))))))) ;)) (statement (declaration (type int) combined_decision = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression decision1)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression decision2))))))))))))) ) (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall complex_decision_tree ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression loop_result)))))))))))))) )))))) (comparisonOperator >=) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment combined_decision = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) })))) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Complex control flow: d1=%d, d2=%d, d3=%d, loops=%d, state=%d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression decision1))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression decision2))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression decision3))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression loop_result))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression final_state)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: state (int)
Declared variable: result (int)
Declared variable: iteration_count (int)
Compiling function: complex_decision_tree
Registered function: complex_decision_tree at address 2
Function parameter: input (int)
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: nested_loops_with_conditions
Registered function: nested_loops_with_conditions at address 40
Declared variable: outer (int)
Initializing variable: outer
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling while statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: inner (int)
Initializing variable: inner
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling while statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: inner = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: outer = <expression>
Compiling function: state_machine_simulation
Registered function: state_machine_simulation at address 86
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: state = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: iteration_count = <expression>
Compiling while statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: state = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: state = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: state = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: state = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: state = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: state = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: state = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: iteration_count = <expression>
Compiling function: setup
Registered function: setup at address 146
Declared variable: decision1 (int)
Initializing variable: decision1
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: complex_decision_tree (placeholder)
Declared variable: decision2 (int)
Initializing variable: decision2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: complex_decision_tree (placeholder)
Declared variable: decision3 (int)
Initializing variable: decision3
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: complex_decision_tree (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: nested_loops_with_conditions (placeholder)
Declared variable: loop_result (int)
Initializing variable: loop_result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: state_machine_simulation (placeholder)
Declared variable: final_state (int)
Initializing variable: final_state
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: combined_decision (int)
Initializing variable: combined_decision
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: complex_decision_tree (placeholder)
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: combined_decision = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 5 args, string_index=0
Resolved function call: setup to address 146
Resolved function call: complex_decision_tree to address 2
Resolved function call: complex_decision_tree to address 2
Resolved function call: complex_decision_tree to address 2
Resolved function call: nested_loops_with_conditions to address 40
Resolved function call: state_machine_simulation to address 86
Resolved function call: complex_decision_tree to address 2
Compilation complete. Generated 182 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  state (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  result (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  iteration_count (scope=0, type=var, datatype=int, global=1, globalIndex=11)
  complex_decision_tree (scope=0, type=func, datatype=int, global=1, globalIndex=12)
  nested_loops_with_conditions (scope=0, type=func, datatype=void, global=1, globalIndex=13)
  state_machine_simulation (scope=0, type=func, datatype=void, global=1, globalIndex=14)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=15)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=146 (encoded: 0x8000092)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
3: opcode=0x1 flags=0x0 immediate=50 (encoded: 0x1000032)
4: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
5: opcode=0x32 flags=0x0 immediate=17 (encoded: 0x32000011)
6: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
7: opcode=0x1 flags=0x0 immediate=75 (encoded: 0x100004b)
8: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
9: opcode=0x32 flags=0x0 immediate=10 (encoded: 0x3200000a)
10: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
11: opcode=0x1 flags=0x0 immediate=90 (encoded: 0x100005a)
12: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
13: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
14: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
15: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
16: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
17: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
18: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
19: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
20: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
21: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
22: opcode=0x30 flags=0x0 immediate=16 (encoded: 0x30000010)
23: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
24: opcode=0x1 flags=0x0 immediate=25 (encoded: 0x1000019)
25: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
26: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
27: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
28: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
29: opcode=0x30 flags=0x0 immediate=9 (encoded: 0x30000009)
30: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
31: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
32: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
33: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
34: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
35: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
36: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
37: opcode=0x1 flags=0x1 immediate=65535 (encoded: 0x101ffff)
38: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
39: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
40: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
41: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
42: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
43: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
44: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
45: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
46: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
47: opcode=0x32 flags=0x0 immediate=37 (encoded: 0x32000025)
48: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
49: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
50: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
51: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
52: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
53: opcode=0x32 flags=0x0 immediate=26 (encoded: 0x3200001a)
54: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
55: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
56: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
57: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
58: opcode=0x7 flags=0x0 immediate=0 (encoded: 0x7000000)
59: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
60: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
61: opcode=0x32 flags=0x0 immediate=5 (encoded: 0x32000005)
62: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
63: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
64: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
65: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
66: opcode=0x30 flags=0x0 immediate=8 (encoded: 0x30000008)
67: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
68: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
69: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
70: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
71: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
72: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
73: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
74: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
75: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
76: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
77: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
78: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
79: opcode=0x30 flags=0x0 immediate=65506 (encoded: 0x3000ffe2)
80: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
81: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
82: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
83: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
84: opcode=0x30 flags=0x0 immediate=65495 (encoded: 0x3000ffd7)
85: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
86: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
87: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
88: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
89: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
90: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
91: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
92: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
93: opcode=0x32 flags=0x0 immediate=51 (encoded: 0x32000033)
94: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
95: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
96: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
97: opcode=0x32 flags=0x0 immediate=12 (encoded: 0x3200000c)
98: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
99: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
100: opcode=0x7 flags=0x0 immediate=0 (encoded: 0x7000000)
101: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
102: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
103: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
104: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
105: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
106: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
107: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
108: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
109: opcode=0x30 flags=0x0 immediate=30 (encoded: 0x3000001e)
110: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
111: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
112: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
113: opcode=0x32 flags=0x0 immediate=10 (encoded: 0x3200000a)
114: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
115: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
116: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
117: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
118: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
119: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
120: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
121: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
122: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
123: opcode=0x30 flags=0x0 immediate=16 (encoded: 0x30000010)
124: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
125: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
126: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
127: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
128: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
129: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
130: opcode=0x30 flags=0x0 immediate=9 (encoded: 0x30000009)
131: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
132: opcode=0x1 flags=0x0 immediate=8 (encoded: 0x1000008)
133: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
134: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
135: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
136: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
137: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
138: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
139: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
140: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
141: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
142: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
143: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
144: opcode=0x30 flags=0x0 immediate=65481 (encoded: 0x3000ffc9)
145: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
146: opcode=0x1 flags=0x0 immediate=95 (encoded: 0x100005f)
147: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
148: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
149: opcode=0x1 flags=0x0 immediate=30 (encoded: 0x100001e)
150: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
151: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
152: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
153: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
154: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
155: opcode=0x8 flags=0x0 immediate=40 (encoded: 0x8000028)
156: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
157: opcode=0x53 flags=0x0 immediate=3 (encoded: 0x53000003)
158: opcode=0x8 flags=0x0 immediate=86 (encoded: 0x8000056)
159: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
160: opcode=0x53 flags=0x0 immediate=4 (encoded: 0x53000004)
161: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
162: opcode=0x53 flags=0x0 immediate=5 (encoded: 0x53000005)
163: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
164: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
165: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
166: opcode=0x32 flags=0x0 immediate=7 (encoded: 0x32000007)
167: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
168: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
169: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
170: opcode=0x25 flags=0x0 immediate=0 (encoded: 0x25000000)
171: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
172: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
173: opcode=0x53 flags=0x0 immediate=5 (encoded: 0x53000005)
174: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
175: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
176: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
177: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
178: opcode=0x52 flags=0x0 immediate=4 (encoded: 0x52000004)
179: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
180: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
181: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Complex control flow: d1=%d, d2=%d, d3=%d, loops=%d, state=%d\n"
Bytecode saved to: tests/test_complex_control_flow.bin
Compilation successful!
Compiling: tests/test_complex_embedded_scenario.c
Source code:
/*
 * Complex Embedded Scenario Test
 * Real-world embedded system simulation combining all language features
 * Simulates a sensor monitoring system with state machine and data processing
 */

// System state variables
int system_state;
int sensor_readings[8];
int reading_index;
int error_count;
int total_readings;
int alert_threshold;

// Processing variables  
int running_average;
int min_reading;
int max_reading;
int processing_flags;

// System states
// 0 = INIT, 1 = MONITORING, 2 = PROCESSING, 3 = ALERT, 4 = ERROR

void init_system() {
    system_state = 0;
    reading_index = 0;
    error_count = 0;
    total_readings = 0;
    alert_threshold = 80;
    running_average = 0;
    min_reading = 1000;
    max_reading = 0;
    processing_flags = 0;
    
    // Initialize sensor array
    int i = 0;
    while (i < 8) {
        sensor_readings[i] = 0;
        i = i + 1;
    }
}

int read_sensor_simulation(int sensor_id) {
    // Simulate sensor reading based on ID and system state
    int base_value = 50 + (sensor_id * 10);
    int variation = (total_readings % 7) - 3;  // -3 to +3 variation
    return base_value + variation;
}

void store_sensor_reading(int value) {
    if (reading_index >= 8) {
        reading_index = 0;  // Circular buffer
    }
    
    sensor_readings[reading_index] = value;
    reading_index = reading_index + 1;
    total_readings = total_readings + 1;
}

int calculate_statistics() {
    int sum = 0;
    int count = 0;
    min_reading = 1000;
    max_reading = 0;
    
    int i = 0;
    while (i < 8) {
        if (sensor_readings[i] > 0) {  // Valid reading
            sum = sum + sensor_readings[i];
            count = count + 1;
            
            if (sensor_readings[i] < min_reading) {
                min_reading = sensor_readings[i];
            }
            if (sensor_readings[i] > max_reading) {
                max_reading = sensor_readings[i];
            }
        }
        i = i + 1;
    }
    
    if (count > 0) {
        running_average = sum / count;
        return 1;  // Success
    } else {
        return 0;  // No valid readings
    }
}

int check_alert_conditions() {
    int alert_flags = 0;
    
    // Check threshold
    if (running_average > alert_threshold) {
        alert_flags = alert_flags | 1;  // High average alert
    }
    
    // Check range
    if ((max_reading - min_reading) > 40) {
        alert_flags = alert_flags | 2;  // High variation alert
    }
    
    // Check error rate
    if (error_count > (total_readings / 10)) {
        alert_flags = alert_flags | 4;  // High error rate alert
    }
    
    return alert_flags;
}

void process_data_pipeline() {
    processing_flags = 0;
    
    // Multi-stage data processing
    if (calculate_statistics()) {
        processing_flags = processing_flags | 1;  // Stats calculated
        
        // Data validation stage
        if ((running_average > 20) && (running_average < 120)) {
            processing_flags = processing_flags | 2;  // Valid range
            
            // Trend analysis simulation
            int trend_direction = 0;
            if (sensor_readings[reading_index - 1] > running_average) {
                trend_direction = 1;  // Increasing
            } else if (sensor_readings[reading_index - 1] < running_average) {
                trend_direction = -1; // Decreasing
            }
            
            if (trend_direction != 0) {
                processing_flags = processing_flags | 4;  // Trend detected
            }
        }
    }
}

void system_state_machine() {
    int next_state = system_state;
    
    if (system_state == 0) {  // INIT
        if (total_readings >= 3) {
            next_state = 1;  // -> MONITORING
        }
    } else if (system_state == 1) {  // MONITORING
        if (total_readings % 5 == 0) {
            next_state = 2;  // -> PROCESSING
        }
        if (error_count > 5) {
            next_state = 4;  // -> ERROR
        }
    } else if (system_state == 2) {  // PROCESSING
        process_data_pipeline();
        
        int alert_flags = check_alert_conditions();
        if (alert_flags > 0) {
            next_state = 3;  // -> ALERT
        } else {
            next_state = 1;  // -> MONITORING
        }
    } else if (system_state == 3) {  // ALERT
        // Simulate alert handling
        if ((processing_flags & 7) == 7) {  // All processing flags set
            next_state = 1;  // -> MONITORING (alert cleared)
        }
    } else if (system_state == 4) {  // ERROR
        if (error_count < 3) {
            next_state = 0;  // -> INIT (reset)
        }
    }
    
    system_state = next_state;
}

void setup() {
    // Initialize the embedded system
    init_system();
    
    // Simulate system operation over multiple cycles
    int cycle = 0;
    while (cycle < 15) {
        // Simulate sensor reading
        int sensor_value = read_sensor_simulation(cycle % 4);
        
        // Validate reading (simulate occasional errors)
        if ((sensor_value > 20) && (sensor_value < 120)) {
            store_sensor_reading(sensor_value);
        } else {
            error_count = error_count + 1;
        }
        
        // Run state machine
        system_state_machine();
        
        // System health check
        if ((system_state == 4) && (cycle > 10)) {
            error_count = 1;  // Simulate error recovery
        }
        
        cycle = cycle + 1;
    }
    
    // Final system status
    int final_alert_status = check_alert_conditions();
    
    printf("Embedded scenario: state=%d, readings=%d, avg=%d, alerts=%d, flags=%d\n",
           system_state, total_readings, running_average, final_alert_status, processing_flags);
}
Parse tree: (program (declaration (type int) system_state ;) (declaration (type int) sensor_readings [ 8 ] ;) (declaration (type int) reading_index ;) (declaration (type int) error_count ;) (declaration (type int) total_readings ;) (declaration (type int) alert_threshold ;) (declaration (type int) running_average ;) (declaration (type int) min_reading ;) (declaration (type int) max_reading ;) (declaration (type int) processing_flags ;) (functionDefinition (type void) init_system ( ) (compoundStatement { (statement (expressionStatement (expression (assignment system_state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment reading_index = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment error_count = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment total_readings = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment alert_threshold = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 80))))))))))))))) ;)) (statement (expressionStatement (expression (assignment running_average = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment min_reading = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1000))))))))))))))) ;)) (statement (expressionStatement (expression (assignment max_reading = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment processing_flags = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (declaration (type int) i = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (whileStatement while ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 8))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment sensor_readings [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i))))))))))))) ] = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (expressionStatement (expression (assignment i = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) })) (functionDefinition (type int) read_sensor_simulation ( (parameterList (parameter (type int) sensor_id)) ) (compoundStatement { (statement (declaration (type int) base_value = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 50)) + (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensor_id) * (primaryExpression 10))))))))))))) )))))))))))))) ;)) (statement (declaration (type int) variation = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression total_readings) % (primaryExpression 7))))))))))))) ))) - (multiplicativeExpression (primaryExpression 3))))))))))))) ;)) (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression base_value)) + (multiplicativeExpression (primaryExpression variation))))))))))))) ;)) })) (functionDefinition (type void) store_sensor_reading ( (parameterList (parameter (type int) value)) ) (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression reading_index)))) (comparisonOperator >=) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 8))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment reading_index = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) })))) (statement (expressionStatement (expression (assignment sensor_readings [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression reading_index))))))))))))) ] = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression value))))))))))))))) ;)) (statement (expressionStatement (expression (assignment reading_index = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression reading_index)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment total_readings = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression total_readings)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })) (functionDefinition (type int) calculate_statistics ( ) (compoundStatement { (statement (declaration (type int) sum = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (declaration (type int) count = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (expressionStatement (expression (assignment min_reading = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1000))))))))))))))) ;)) (statement (expressionStatement (expression (assignment max_reading = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (declaration (type int) i = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (whileStatement while ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 8))))))))))))) ) (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensor_readings [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i))))))))))))) ])))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment sum = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sum)) + (multiplicativeExpression (primaryExpression sensor_readings [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i))))))))))))) ]))))))))))))))) ;)) (statement (expressionStatement (expression (assignment count = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression count)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensor_readings [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i))))))))))))) ])))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression min_reading))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment min_reading = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensor_readings [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i))))))))))))) ]))))))))))))))) ;)) })))) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensor_readings [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i))))))))))))) ])))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression max_reading))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment max_reading = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensor_readings [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i))))))))))))) ]))))))))))))))) ;)) })))) })))) (statement (expressionStatement (expression (assignment i = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression count)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment running_average = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sum) / (primaryExpression count))))))))))))))) ;)) (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ;)) })) else (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) })))) })) (functionDefinition (type int) check_alert_conditions ( ) (compoundStatement { (statement (declaration (type int) alert_flags = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression running_average)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression alert_threshold))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment alert_flags = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression alert_flags))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression max_reading)) - (multiplicativeExpression (primaryExpression min_reading))))))))))))) ))))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 40))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment alert_flags = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression alert_flags))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) })))) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression error_count)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression total_readings) / (primaryExpression 10))))))))))))) )))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment alert_flags = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression alert_flags))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4))))))))))))))) ;)) })))) (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression alert_flags))))))))))))) ;)) })) (functionDefinition (type void) process_data_pipeline ( ) (compoundStatement { (statement (expressionStatement (expression (assignment processing_flags = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall calculate_statistics ( ))))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment processing_flags = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression processing_flags))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression running_average)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 20))))))))))))) )))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression running_average)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 120))))))))))))) )))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment processing_flags = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression processing_flags))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) (statement (declaration (type int) trend_direction = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensor_readings [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression reading_index)) - (multiplicativeExpression (primaryExpression 1))))))))))))) ])))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression running_average))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment trend_direction = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })) else (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensor_readings [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression reading_index)) - (multiplicativeExpression (primaryExpression 1))))))))))))) ])))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression running_average))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment trend_direction = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression - 1))))))))))))))) ;)) })))))) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression trend_direction)))) (comparisonOperator !=) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment processing_flags = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression processing_flags))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4))))))))))))))) ;)) })))) })))) })))) })) (functionDefinition (type void) system_state_machine ( ) (compoundStatement { (statement (declaration (type int) next_state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression system_state))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression system_state)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression total_readings)))) (comparisonOperator >=) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment next_state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) })) else (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression system_state)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ) (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression total_readings) % (primaryExpression 5)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment next_state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) })))) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression error_count)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment next_state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4))))))))))))))) ;)) })))) })) else (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression system_state)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall process_data_pipeline ( ))))))))))))))) ;)) (statement (declaration (type int) alert_flags = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall check_alert_conditions ( ))))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression alert_flags)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment next_state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))))) ;)) })) else (statement (compoundStatement { (statement (expressionStatement (expression (assignment next_state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) })) else (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression system_state)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))) ) (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression processing_flags))))) & (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 7))))))))))))) ))))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 7))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment next_state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) })) else (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression system_state)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4))))))))))))) ) (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression error_count)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment next_state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) })))) })))))))))))) (statement (expressionStatement (expression (assignment system_state = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression next_state))))))))))))))) ;)) })) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall init_system ( ))))))))))))))) ;)) (statement (declaration (type int) cycle = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (whileStatement while ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression cycle)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 15))))))))))))) ) (statement (compoundStatement { (statement (declaration (type int) sensor_value = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall read_sensor_simulation ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression cycle) % (primaryExpression 4)))))))))))))) ))))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensor_value)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 20))))))))))))) )))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensor_value)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 120))))))))))))) )))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall store_sensor_reading ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sensor_value)))))))))))))) ))))))))))))))) ;)) })) else (statement (compoundStatement { (statement (expressionStatement (expression (assignment error_count = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression error_count)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall system_state_machine ( ))))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression system_state)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4))))))))))))) )))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression cycle)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))) )))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment error_count = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) (statement (expressionStatement (expression (assignment cycle = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression cycle)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) (statement (declaration (type int) final_alert_status = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall check_alert_conditions ( ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Embedded scenario: state=%d, readings=%d, avg=%d, alerts=%d, flags=%d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression system_state))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression total_readings))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression running_average))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression final_alert_status))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression processing_flags)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: system_state (int)
Declared array: sensor_readings[8] (int)
Declared variable: reading_index (int)
Declared variable: error_count (int)
Declared variable: total_readings (int)
Declared variable: alert_threshold (int)
Declared variable: running_average (int)
Declared variable: min_reading (int)
Declared variable: max_reading (int)
Declared variable: processing_flags (int)
Compiling function: init_system
Registered function: init_system at address 4
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: system_state = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: reading_index = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: error_count = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: total_readings = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: alert_threshold = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: running_average = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: min_reading = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: max_reading = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: processing_flags = <expression>
Declared variable: i (int)
Initializing variable: i
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling while statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated array assignment: sensor_readings[index] = value
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: i = <expression>
Compiling function: read_sensor_simulation
Registered function: read_sensor_simulation at address 37
Function parameter: sensor_id (int)
Declared variable: base_value (int)
Initializing variable: base_value
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: variation (int)
Initializing variable: variation
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling function: store_sensor_reading
Registered function: store_sensor_reading at address 54
Function parameter: value (int)
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: reading_index = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated array assignment: sensor_readings[index] = value
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: reading_index = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: total_readings = <expression>
Compiling function: calculate_statistics
Registered function: calculate_statistics at address 72
Declared variable: sum (int)
Initializing variable: sum
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: count (int)
Initializing variable: count
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: min_reading = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: max_reading = <expression>
Declared variable: i (int)
Initializing variable: i
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling while statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: sum = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: count = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: min_reading = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: max_reading = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: i = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: running_average = <expression>
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: check_alert_conditions
Registered function: check_alert_conditions at address 135
Declared variable: alert_flags (int)
Initializing variable: alert_flags
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: alert_flags = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: alert_flags = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: alert_flags = <expression>
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: process_data_pipeline
Registered function: process_data_pipeline at address 168
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: processing_flags = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: calculate_statistics (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: processing_flags = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: processing_flags = <expression>
Declared variable: trend_direction (int)
Initializing variable: trend_direction
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: trend_direction = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: trend_direction = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: processing_flags = <expression>
Compiling function: system_state_machine
Registered function: system_state_machine at address 221
Declared variable: next_state (int)
Initializing variable: next_state
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: next_state = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: next_state = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: next_state = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: process_data_pipeline (placeholder)
Declared variable: alert_flags (int)
Initializing variable: alert_flags
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: check_alert_conditions (placeholder)
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: next_state = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: next_state = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: next_state = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: next_state = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: system_state = <expression>
Compiling function: setup
Registered function: setup at address 296
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: init_system (placeholder)
Declared variable: cycle (int)
Initializing variable: cycle
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling while statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: sensor_value (int)
Initializing variable: sensor_value
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: read_sensor_simulation (placeholder)
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: store_sensor_reading (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: error_count = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: system_state_machine (placeholder)
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: error_count = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: cycle = <expression>
Declared variable: final_alert_status (int)
Initializing variable: final_alert_status
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: check_alert_conditions (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 5 args, string_index=0
Resolved function call: setup to address 296
Resolved function call: calculate_statistics to address 72
Resolved function call: process_data_pipeline to address 168
Resolved function call: check_alert_conditions to address 135
Resolved function call: init_system to address 4
Resolved function call: read_sensor_simulation to address 37
Resolved function call: store_sensor_reading to address 54
Resolved function call: system_state_machine to address 221
Resolved function call: check_alert_conditions to address 135
Compilation complete. Generated 355 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  system_state (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  sensor_readings (scope=0, type=array, datatype=int, global=1, globalIndex=10, arraySize=8, arrayId=0)
  reading_index (scope=0, type=var, datatype=int, global=1, globalIndex=11)
  error_count (scope=0, type=var, datatype=int, global=1, globalIndex=12)
  total_readings (scope=0, type=var, datatype=int, global=1, globalIndex=13)
  alert_threshold (scope=0, type=var, datatype=int, global=1, globalIndex=14)
  running_average (scope=0, type=var, datatype=int, global=1, globalIndex=15)
  min_reading (scope=0, type=var, datatype=int, global=1, globalIndex=16)
  max_reading (scope=0, type=var, datatype=int, global=1, globalIndex=17)
  processing_flags (scope=0, type=var, datatype=int, global=1, globalIndex=18)
  init_system (scope=0, type=func, datatype=void, global=1, globalIndex=19)
  read_sensor_simulation (scope=0, type=func, datatype=int, global=1, globalIndex=20)
  store_sensor_reading (scope=0, type=func, datatype=void, global=1, globalIndex=21)
  calculate_statistics (scope=0, type=func, datatype=int, global=1, globalIndex=22)
  check_alert_conditions (scope=0, type=func, datatype=int, global=1, globalIndex=23)
  process_data_pipeline (scope=0, type=func, datatype=void, global=1, globalIndex=24)
  system_state_machine (scope=0, type=func, datatype=void, global=1, globalIndex=25)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=26)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=296 (encoded: 0x8000128)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x56 flags=0x0 immediate=0 (encoded: 0x56000000)
3: opcode=0x1 flags=0x0 immediate=8 (encoded: 0x1000008)
4: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
5: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
6: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
7: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
8: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
9: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
10: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
11: opcode=0x51 flags=0x0 immediate=13 (encoded: 0x5100000d)
12: opcode=0x1 flags=0x0 immediate=80 (encoded: 0x1000050)
13: opcode=0x51 flags=0x0 immediate=14 (encoded: 0x5100000e)
14: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
15: opcode=0x51 flags=0x0 immediate=15 (encoded: 0x5100000f)
16: opcode=0x1 flags=0x0 immediate=1000 (encoded: 0x10003e8)
17: opcode=0x51 flags=0x0 immediate=16 (encoded: 0x51000010)
18: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
19: opcode=0x51 flags=0x0 immediate=17 (encoded: 0x51000011)
20: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
21: opcode=0x51 flags=0x0 immediate=18 (encoded: 0x51000012)
22: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
23: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
24: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
25: opcode=0x1 flags=0x0 immediate=8 (encoded: 0x1000008)
26: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
27: opcode=0x32 flags=0x0 immediate=8 (encoded: 0x32000008)
28: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
29: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
30: opcode=0x55 flags=0x0 immediate=0 (encoded: 0x55000000)
31: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
32: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
33: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
34: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
35: opcode=0x30 flags=0x0 immediate=65524 (encoded: 0x3000fff4)
36: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
37: opcode=0x1 flags=0x0 immediate=50 (encoded: 0x1000032)
38: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
39: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
40: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
41: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
42: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
43: opcode=0x50 flags=0x0 immediate=13 (encoded: 0x5000000d)
44: opcode=0x1 flags=0x0 immediate=7 (encoded: 0x1000007)
45: opcode=0x7 flags=0x0 immediate=0 (encoded: 0x7000000)
46: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
47: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
48: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
49: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
50: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
51: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
52: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
53: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
54: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
55: opcode=0x1 flags=0x0 immediate=8 (encoded: 0x1000008)
56: opcode=0x25 flags=0x0 immediate=0 (encoded: 0x25000000)
57: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
58: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
59: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
60: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
61: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
62: opcode=0x55 flags=0x0 immediate=0 (encoded: 0x55000000)
63: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
64: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
65: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
66: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
67: opcode=0x50 flags=0x0 immediate=13 (encoded: 0x5000000d)
68: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
69: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
70: opcode=0x51 flags=0x0 immediate=13 (encoded: 0x5100000d)
71: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
72: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
73: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
74: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
75: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
76: opcode=0x1 flags=0x0 immediate=1000 (encoded: 0x10003e8)
77: opcode=0x51 flags=0x0 immediate=16 (encoded: 0x51000010)
78: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
79: opcode=0x51 flags=0x0 immediate=17 (encoded: 0x51000011)
80: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
81: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
82: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
83: opcode=0x1 flags=0x0 immediate=8 (encoded: 0x1000008)
84: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
85: opcode=0x32 flags=0x0 immediate=35 (encoded: 0x32000023)
86: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
87: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
88: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
89: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
90: opcode=0x32 flags=0x0 immediate=25 (encoded: 0x32000019)
91: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
92: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
93: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
94: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
95: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
96: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
97: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
98: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
99: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
100: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
101: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
102: opcode=0x50 flags=0x0 immediate=16 (encoded: 0x50000010)
103: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
104: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
105: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
106: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
107: opcode=0x51 flags=0x0 immediate=16 (encoded: 0x51000010)
108: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
109: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
110: opcode=0x50 flags=0x0 immediate=17 (encoded: 0x50000011)
111: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
112: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
113: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
114: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
115: opcode=0x51 flags=0x0 immediate=17 (encoded: 0x51000011)
116: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
117: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
118: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
119: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
120: opcode=0x30 flags=0x0 immediate=65497 (encoded: 0x3000ffd9)
121: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
122: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
123: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
124: opcode=0x32 flags=0x0 immediate=7 (encoded: 0x32000007)
125: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
126: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
127: opcode=0x6 flags=0x0 immediate=0 (encoded: 0x6000000)
128: opcode=0x51 flags=0x0 immediate=15 (encoded: 0x5100000f)
129: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
130: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
131: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
132: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
133: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
134: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
135: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
136: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
137: opcode=0x50 flags=0x0 immediate=15 (encoded: 0x5000000f)
138: opcode=0x50 flags=0x0 immediate=14 (encoded: 0x5000000e)
139: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
140: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
141: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
142: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
143: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
144: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
145: opcode=0x50 flags=0x0 immediate=17 (encoded: 0x50000011)
146: opcode=0x50 flags=0x0 immediate=16 (encoded: 0x50000010)
147: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
148: opcode=0x1 flags=0x0 immediate=40 (encoded: 0x1000028)
149: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
150: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
151: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
152: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
153: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
154: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
155: opcode=0x50 flags=0x0 immediate=12 (encoded: 0x5000000c)
156: opcode=0x50 flags=0x0 immediate=13 (encoded: 0x5000000d)
157: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
158: opcode=0x6 flags=0x0 immediate=0 (encoded: 0x6000000)
159: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
160: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
161: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
162: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
163: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
164: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
165: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
166: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
167: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
168: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
169: opcode=0x51 flags=0x0 immediate=18 (encoded: 0x51000012)
170: opcode=0x8 flags=0x0 immediate=72 (encoded: 0x8000048)
171: opcode=0x32 flags=0x0 immediate=48 (encoded: 0x32000030)
172: opcode=0x50 flags=0x0 immediate=18 (encoded: 0x50000012)
173: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
174: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
175: opcode=0x51 flags=0x0 immediate=18 (encoded: 0x51000012)
176: opcode=0x50 flags=0x0 immediate=15 (encoded: 0x5000000f)
177: opcode=0x1 flags=0x0 immediate=20 (encoded: 0x1000014)
178: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
179: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
180: opcode=0x50 flags=0x0 immediate=15 (encoded: 0x5000000f)
181: opcode=0x1 flags=0x0 immediate=120 (encoded: 0x1000078)
182: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
183: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
184: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
185: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
186: opcode=0x32 flags=0x0 immediate=33 (encoded: 0x32000021)
187: opcode=0x50 flags=0x0 immediate=18 (encoded: 0x50000012)
188: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
189: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
190: opcode=0x51 flags=0x0 immediate=18 (encoded: 0x51000012)
191: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
192: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
193: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
194: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
195: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
196: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
197: opcode=0x50 flags=0x0 immediate=15 (encoded: 0x5000000f)
198: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
199: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
200: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
201: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
202: opcode=0x30 flags=0x0 immediate=9 (encoded: 0x30000009)
203: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
204: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
205: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
206: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
207: opcode=0x50 flags=0x0 immediate=15 (encoded: 0x5000000f)
208: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
209: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
210: opcode=0x1 flags=0x1 immediate=65535 (encoded: 0x101ffff)
211: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
212: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
213: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
214: opcode=0x21 flags=0x0 immediate=0 (encoded: 0x21000000)
215: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
216: opcode=0x50 flags=0x0 immediate=18 (encoded: 0x50000012)
217: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
218: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
219: opcode=0x51 flags=0x0 immediate=18 (encoded: 0x51000012)
220: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
221: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
222: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
223: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
224: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
225: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
226: opcode=0x32 flags=0x0 immediate=7 (encoded: 0x32000007)
227: opcode=0x50 flags=0x0 immediate=13 (encoded: 0x5000000d)
228: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
229: opcode=0x25 flags=0x0 immediate=0 (encoded: 0x25000000)
230: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
231: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
232: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
233: opcode=0x30 flags=0x0 immediate=59 (encoded: 0x3000003b)
234: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
235: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
236: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
237: opcode=0x32 flags=0x0 immediate=15 (encoded: 0x3200000f)
238: opcode=0x50 flags=0x0 immediate=13 (encoded: 0x5000000d)
239: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
240: opcode=0x7 flags=0x0 immediate=0 (encoded: 0x7000000)
241: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
242: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
243: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
244: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
245: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
246: opcode=0x50 flags=0x0 immediate=12 (encoded: 0x5000000c)
247: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
248: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
249: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
250: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
251: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
252: opcode=0x30 flags=0x0 immediate=40 (encoded: 0x30000028)
253: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
254: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
255: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
256: opcode=0x32 flags=0x0 immediate=13 (encoded: 0x3200000d)
257: opcode=0x8 flags=0x0 immediate=168 (encoded: 0x80000a8)
258: opcode=0x8 flags=0x0 immediate=135 (encoded: 0x8000087)
259: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
260: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
261: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
262: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
263: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
264: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
265: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
266: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
267: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
268: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
269: opcode=0x30 flags=0x0 immediate=23 (encoded: 0x30000017)
270: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
271: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
272: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
273: opcode=0x32 flags=0x0 immediate=9 (encoded: 0x32000009)
274: opcode=0x50 flags=0x0 immediate=18 (encoded: 0x50000012)
275: opcode=0x1 flags=0x0 immediate=7 (encoded: 0x1000007)
276: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
277: opcode=0x1 flags=0x0 immediate=7 (encoded: 0x1000007)
278: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
279: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
280: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
281: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
282: opcode=0x30 flags=0x0 immediate=10 (encoded: 0x3000000a)
283: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
284: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
285: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
286: opcode=0x32 flags=0x0 immediate=6 (encoded: 0x32000006)
287: opcode=0x50 flags=0x0 immediate=12 (encoded: 0x5000000c)
288: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
289: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
290: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
291: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
292: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
293: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
294: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
295: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
296: opcode=0x8 flags=0x0 immediate=4 (encoded: 0x8000004)
297: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
298: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
299: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
300: opcode=0x1 flags=0x0 immediate=15 (encoded: 0x100000f)
301: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
302: opcode=0x32 flags=0x0 immediate=42 (encoded: 0x3200002a)
303: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
304: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
305: opcode=0x7 flags=0x0 immediate=0 (encoded: 0x7000000)
306: opcode=0x8 flags=0x0 immediate=37 (encoded: 0x8000025)
307: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
308: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
309: opcode=0x1 flags=0x0 immediate=20 (encoded: 0x1000014)
310: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
311: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
312: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
313: opcode=0x1 flags=0x0 immediate=120 (encoded: 0x1000078)
314: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
315: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
316: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
317: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
318: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
319: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
320: opcode=0x8 flags=0x0 immediate=54 (encoded: 0x8000036)
321: opcode=0x30 flags=0x0 immediate=4 (encoded: 0x30000004)
322: opcode=0x50 flags=0x0 immediate=12 (encoded: 0x5000000c)
323: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
324: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
325: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
326: opcode=0x8 flags=0x0 immediate=221 (encoded: 0x80000dd)
327: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
328: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
329: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
330: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
331: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
332: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
333: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
334: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
335: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
336: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
337: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
338: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
339: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
340: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
341: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
342: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
343: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
344: opcode=0x30 flags=0x0 immediate=65490 (encoded: 0x3000ffd2)
345: opcode=0x8 flags=0x0 immediate=135 (encoded: 0x8000087)
346: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
347: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
348: opcode=0x50 flags=0x0 immediate=13 (encoded: 0x5000000d)
349: opcode=0x50 flags=0x0 immediate=15 (encoded: 0x5000000f)
350: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
351: opcode=0x50 flags=0x0 immediate=18 (encoded: 0x50000012)
352: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
353: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
354: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Embedded scenario: state=%d, readings=%d, avg=%d, alerts=%d, flags=%d\n"
Bytecode saved to: tests/test_complex_embedded_scenario.bin
Compilation successful!
Compiling: tests/test_complex_expressions.c
Source code:
/*
 * Complex Expressions Test
 * Tests deeply nested expressions with all operator types
 */

int a;
int b;
int c;
int d;
int result;

int complex_calculation(int x, int y, int z) {
    // Multi-level expression with all operator precedence levels
    return ((x + y * z) << 1) | ((x & y) ^ (z >> 1)) + 
           (((x > y) && (y < z)) ? 1 : 0) * ((~x) & 0x0F);
}

void operator_precedence_stress_test() {
    a = 8;   // 1000
    b = 6;   // 0110  
    c = 4;   // 0100
    d = 2;   // 0010
    
    // Complex expression testing all precedence levels
    // ! ~ (highest)
    // * / % 
    // + -
    // << >>
    // < <= > >=
    // == !=
    // &
    // ^
    // |
    // &&
    // || (lowest)
    
    result = !((a & b) == 0) && 
             ((c << 1) > d) ||
             ((a ^ b) != (c | d)) &&
             (((a + b) * c) >> 2) < ((d * 4) + 1);
    
    // Should evaluate to a consistent boolean result
}

void nested_ternary_simulation() {
    // Simulate ternary operator using if-else
    int x = 10;
    int y = 20;
    int z = 15;
    
    // Nested conditional logic equivalent to: 
    // result = (x > y) ? ((y > z) ? x : y) : ((z > x) ? z : x);
    
    if (x > y) {
        if (y > z) {
            result = x;
        } else {
            result = y;
        }
    } else {
        if (z > x) {
            result = z;
        } else {
            result = x;
        }
    }
}

void bitwise_arithmetic_combinations() {
    a = 0x2A;  // 42 in decimal, 101010 in binary
    b = 0x15;  // 21 in decimal, 010101 in binary
    
    // Complex bitwise and arithmetic combinations
    int step1 = (a & b) + (a | b);        // AND + OR
    int step2 = (a ^ b) - (step1 >> 1);   // XOR - shifted result
    int step3 = (~step2) & 0xFF;          // NOT with mask
    int step4 = (step3 << 2) | (a >> 3);  // Shift left OR shift right
    
    // Verify with comparison and logical operations
    result = ((step4 > 100) && (step4 < 300)) ? step4 : 0;
}

void setup() {
    // Test complex calculation function
    int calc_result = complex_calculation(12, 8, 4);
    
    // Test operator precedence stress
    operator_precedence_stress_test();
    int precedence_result = result;
    
    // Test nested conditional logic
    nested_ternary_simulation();
    int ternary_result = result;
    
    // Test bitwise-arithmetic combinations
    bitwise_arithmetic_combinations();
    int bitwise_result = result;
    
    // Final complex expression combining all results
    int final_check = ((calc_result & 0x1F) << 2) + 
                     ((precedence_result ? 1 : 0) << 1) +
                     ((ternary_result > 10) ? 1 : 0);
    
    printf("Complex expressions: calc=%d, prec=%d, tern=%d, bit=%d, final=%d\n",
           calc_result, precedence_result, ternary_result, bitwise_result, final_check);
}
Parse tree: (program (declaration (type int) a ;) (declaration (type int) b ;) (declaration (type int) c ;) (declaration (type int) d ;) (declaration (type int) result ;) (functionDefinition (type int) complex_calculation ( (parameterList (parameter (type int) x) , (parameter (type int) y) , (parameter (type int) z)) ) (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression x)) + (multiplicativeExpression (primaryExpression y) * (primaryExpression z))))))))))))) )))) << (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) )))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression x))))) & (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression y))))))))))))) ))))))) ^ (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression z))) >> (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) )))))))))))))) ))) + (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression x)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression y))))))))))))) )))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression y)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression z))))))))))))) )))))))))))))) )))))))))))) ? (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) : (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) )) * (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression ~ (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression x)))))))))))))) )))))) & (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0x0F))))))))))))) )))))))))))))) ;)) })) (functionDefinition (type void) operator_precedence_stress_test ( ) (compoundStatement { (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 8))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 6))))))))))))))) ;)) (statement (expressionStatement (expression (assignment c = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4))))))))))))))) ;)) (statement (expressionStatement (expression (assignment d = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression ! (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))) & (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) ))))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ))))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression c))) << (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ))))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression d))))))))))))) ))))))))))) || (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))) ^ (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) ))))) (comparisonOperator !=) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression c))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression d))))))))))))) )))))))))))))) )))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)) + (multiplicativeExpression (primaryExpression b))))))))))))) )) * (primaryExpression c))))))))))))) )))) >> (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))) ))))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression d) * (primaryExpression 4))))))))))))) ))) + (multiplicativeExpression (primaryExpression 1))))))))))))) )))))))))))))))) ;)) })) (functionDefinition (type void) nested_ternary_simulation ( ) (compoundStatement { (statement (declaration (type int) x = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))) ;)) (statement (declaration (type int) y = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 20))))))))))))) ;)) (statement (declaration (type int) z = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 15))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression x)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression y))))))))))))) ) (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression y)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression z))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression x))))))))))))))) ;)) })) else (statement (compoundStatement { (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression y))))))))))))))) ;)) })))) })) else (statement (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression z)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression x))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression z))))))))))))))) ;)) })) else (statement (compoundStatement { (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression x))))))))))))))) ;)) })))) })))) })) (functionDefinition (type void) bitwise_arithmetic_combinations ( ) (compoundStatement { (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0x2A))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0x15))))))))))))))) ;)) (statement (declaration (type int) step1 = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))) & (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) ))) + (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) )))))))))))))) ;)) (statement (declaration (type int) step2 = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))) ^ (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) ))) - (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression step1))) >> (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) )))))))))))))) ;)) (statement (declaration (type int) step3 = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression ~ (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression step2)))))))))))))) )))))) & (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0xFF))))))))))))) ;)) (statement (declaration (type int) step4 = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression step3))) << (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))) )))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))) >> (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))) )))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression step4)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 100))))))))))))) )))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression step4)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 300))))))))))))) )))))))))))))) )))))))))))) ? (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression step4))))))))))))) : (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))))) ;)) })) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (declaration (type int) calc_result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall complex_calculation ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 12))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 8))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall operator_precedence_stress_test ( ))))))))))))))) ;)) (statement (declaration (type int) precedence_result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall nested_ternary_simulation ( ))))))))))))))) ;)) (statement (declaration (type int) ternary_result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall bitwise_arithmetic_combinations ( ))))))))))))))) ;)) (statement (declaration (type int) bitwise_result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result))))))))))))) ;)) (statement (declaration (type int) final_check = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression calc_result))))) & (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0x1F))))))))))))) )))) << (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))) ))) + (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression precedence_result))))))))))) ? (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) : (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) )))) << (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ))) + (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ternary_result)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))) )))))))))))) ? (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) : (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) )))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Complex expressions: calc=%d, prec=%d, tern=%d, bit=%d, final=%d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression calc_result))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression precedence_result))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ternary_result))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression bitwise_result))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression final_check)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: a (int)
Declared variable: b (int)
Declared variable: c (int)
Declared variable: d (int)
Declared variable: result (int)
Compiling function: complex_calculation
Registered function: complex_calculation at address 2
Function parameter: x (int)
Function parameter: y (int)
Function parameter: z (int)
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: operator_precedence_stress_test
Registered function: operator_precedence_stress_test at address 37
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: c = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: d = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling function: nested_ternary_simulation
Registered function: nested_ternary_simulation at address 90
Declared variable: x (int)
Initializing variable: x
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: y (int)
Initializing variable: y
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: z (int)
Initializing variable: z
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling function: bitwise_arithmetic_combinations
Registered function: bitwise_arithmetic_combinations at address 120
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Declared variable: step1 (int)
Initializing variable: step1
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: step2 (int)
Initializing variable: step2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: step3 (int)
Initializing variable: step3
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: step4 (int)
Initializing variable: step4
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling function: setup
Registered function: setup at address 167
Declared variable: calc_result (int)
Initializing variable: calc_result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: complex_calculation (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: operator_precedence_stress_test (placeholder)
Declared variable: precedence_result (int)
Initializing variable: precedence_result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: nested_ternary_simulation (placeholder)
Declared variable: ternary_result (int)
Initializing variable: ternary_result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: bitwise_arithmetic_combinations (placeholder)
Declared variable: bitwise_result (int)
Initializing variable: bitwise_result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: final_check (int)
Initializing variable: final_check
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 5 args, string_index=0
Resolved function call: setup to address 167
Resolved function call: complex_calculation to address 2
Resolved function call: operator_precedence_stress_test to address 37
Resolved function call: nested_ternary_simulation to address 90
Resolved function call: bitwise_arithmetic_combinations to address 120
Compilation complete. Generated 207 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  a (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  b (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  c (scope=0, type=var, datatype=int, global=1, globalIndex=11)
  d (scope=0, type=var, datatype=int, global=1, globalIndex=12)
  result (scope=0, type=var, datatype=int, global=1, globalIndex=13)
  complex_calculation (scope=0, type=func, datatype=int, global=1, globalIndex=14)
  operator_precedence_stress_test (scope=0, type=func, datatype=void, global=1, globalIndex=15)
  nested_ternary_simulation (scope=0, type=func, datatype=void, global=1, globalIndex=16)
  bitwise_arithmetic_combinations (scope=0, type=func, datatype=void, global=1, globalIndex=17)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=18)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=167 (encoded: 0x80000a7)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
3: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
4: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
5: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
6: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
7: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
8: opcode=0x64 flags=0x0 immediate=0 (encoded: 0x64000000)
9: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
10: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
11: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
12: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
13: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
14: opcode=0x65 flags=0x0 immediate=0 (encoded: 0x65000000)
15: opcode=0x62 flags=0x0 immediate=0 (encoded: 0x62000000)
16: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
17: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
18: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
19: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
20: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
21: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
22: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
23: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
24: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
25: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
26: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
27: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
28: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
29: opcode=0x63 flags=0x0 immediate=0 (encoded: 0x63000000)
30: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
31: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
32: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
33: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
34: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
35: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
36: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
37: opcode=0x1 flags=0x0 immediate=8 (encoded: 0x1000008)
38: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
39: opcode=0x1 flags=0x0 immediate=6 (encoded: 0x1000006)
40: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
41: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
42: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
43: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
44: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
45: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
46: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
47: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
48: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
49: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
50: opcode=0x42 flags=0x0 immediate=0 (encoded: 0x42000000)
51: opcode=0x32 flags=0x0 immediate=6 (encoded: 0x32000006)
52: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
53: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
54: opcode=0x64 flags=0x0 immediate=0 (encoded: 0x64000000)
55: opcode=0x50 flags=0x0 immediate=12 (encoded: 0x5000000c)
56: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
57: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
58: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
59: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
60: opcode=0x31 flags=0x0 immediate=25 (encoded: 0x31000019)
61: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
62: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
63: opcode=0x62 flags=0x0 immediate=0 (encoded: 0x62000000)
64: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
65: opcode=0x50 flags=0x0 immediate=12 (encoded: 0x5000000c)
66: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
67: opcode=0x21 flags=0x0 immediate=0 (encoded: 0x21000000)
68: opcode=0x32 flags=0x0 immediate=14 (encoded: 0x3200000e)
69: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
70: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
71: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
72: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
73: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
74: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
75: opcode=0x65 flags=0x0 immediate=0 (encoded: 0x65000000)
76: opcode=0x50 flags=0x0 immediate=12 (encoded: 0x5000000c)
77: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
78: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
79: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
80: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
81: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
82: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
83: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
84: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
85: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
86: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
87: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
88: opcode=0x51 flags=0x0 immediate=13 (encoded: 0x5100000d)
89: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
90: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
91: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
92: opcode=0x1 flags=0x0 immediate=20 (encoded: 0x1000014)
93: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
94: opcode=0x1 flags=0x0 immediate=15 (encoded: 0x100000f)
95: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
96: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
97: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
98: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
99: opcode=0x32 flags=0x0 immediate=10 (encoded: 0x3200000a)
100: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
101: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
102: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
103: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
104: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
105: opcode=0x51 flags=0x0 immediate=13 (encoded: 0x5100000d)
106: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
107: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
108: opcode=0x51 flags=0x0 immediate=13 (encoded: 0x5100000d)
109: opcode=0x30 flags=0x0 immediate=9 (encoded: 0x30000009)
110: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
111: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
112: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
113: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
114: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
115: opcode=0x51 flags=0x0 immediate=13 (encoded: 0x5100000d)
116: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
117: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
118: opcode=0x51 flags=0x0 immediate=13 (encoded: 0x5100000d)
119: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
120: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
121: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
122: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
123: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
124: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
125: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
126: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
127: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
128: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
129: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
130: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
131: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
132: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
133: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
134: opcode=0x62 flags=0x0 immediate=0 (encoded: 0x62000000)
135: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
136: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
137: opcode=0x65 flags=0x0 immediate=0 (encoded: 0x65000000)
138: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
139: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
140: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
141: opcode=0x63 flags=0x0 immediate=0 (encoded: 0x63000000)
142: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
143: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
144: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
145: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
146: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
147: opcode=0x64 flags=0x0 immediate=0 (encoded: 0x64000000)
148: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
149: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
150: opcode=0x65 flags=0x0 immediate=0 (encoded: 0x65000000)
151: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
152: opcode=0x53 flags=0x0 immediate=3 (encoded: 0x53000003)
153: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
154: opcode=0x1 flags=0x0 immediate=100 (encoded: 0x1000064)
155: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
156: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
157: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
158: opcode=0x1 flags=0x0 immediate=300 (encoded: 0x100012c)
159: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
160: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
161: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
162: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
163: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
164: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
165: opcode=0x51 flags=0x0 immediate=13 (encoded: 0x5100000d)
166: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
167: opcode=0x1 flags=0x0 immediate=12 (encoded: 0x100000c)
168: opcode=0x1 flags=0x0 immediate=8 (encoded: 0x1000008)
169: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
170: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
171: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
172: opcode=0x8 flags=0x0 immediate=37 (encoded: 0x8000025)
173: opcode=0x50 flags=0x0 immediate=13 (encoded: 0x5000000d)
174: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
175: opcode=0x8 flags=0x0 immediate=90 (encoded: 0x800005a)
176: opcode=0x50 flags=0x0 immediate=13 (encoded: 0x5000000d)
177: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
178: opcode=0x8 flags=0x0 immediate=120 (encoded: 0x8000078)
179: opcode=0x50 flags=0x0 immediate=13 (encoded: 0x5000000d)
180: opcode=0x53 flags=0x0 immediate=3 (encoded: 0x53000003)
181: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
182: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
183: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
184: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
185: opcode=0x64 flags=0x0 immediate=0 (encoded: 0x64000000)
186: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
187: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
188: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
189: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
190: opcode=0x64 flags=0x0 immediate=0 (encoded: 0x64000000)
191: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
192: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
193: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
194: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
195: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
196: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
197: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
198: opcode=0x53 flags=0x0 immediate=4 (encoded: 0x53000004)
199: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
200: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
201: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
202: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
203: opcode=0x52 flags=0x0 immediate=4 (encoded: 0x52000004)
204: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
205: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
206: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Complex expressions: calc=%d, prec=%d, tern=%d, bit=%d, final=%d\n"
Bytecode saved to: tests/test_complex_expressions.bin
Compilation successful!
Compiling: tests/test_complex_functions.c
Source code:
/*
 * Complex Functions Test  
 * Tests advanced function interactions, recursion, and call patterns
 */

int computation_cache[5];
int cache_index;

int power(int base, int exponent) {
    if (exponent == 0) {
        return 1;
    }
    if (exponent == 1) {
        return base;
    }
    
    int half_power = power(base, exponent / 2);
    if (exponent % 2 == 0) {
        return half_power * half_power;
    } else {
        return base * half_power * half_power;
    }
}

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

void cache_computation(int value) {
    if (cache_index < 5) {
        computation_cache[cache_index] = value;
        cache_index = cache_index + 1;
    }
}

int get_cached_sum() {
    int sum = 0;
    int i = 0;
    while (i < cache_index) {
        sum = sum + computation_cache[i];
        i = i + 1;
    }
    return sum;
}

int mutual_recursion_a(int n);
int mutual_recursion_b(int n);

int mutual_recursion_a(int n) {
    if (n <= 0) {
        return 1;
    } else {
        return mutual_recursion_b(n - 1);
    }
}

int mutual_recursion_b(int n) {
    if (n <= 0) {
        return 0;
    } else {
        return mutual_recursion_a(n - 1);
    }
}

int complex_function_chain(int input) {
    int step1 = power(input, 2);        // Square
    int step2 = gcd(step1, 24);         // GCD with 24
    cache_computation(step2);           // Cache the result
    int step3 = mutual_recursion_a(step2 % 4);  // Mutual recursion
    return step3 + get_cached_sum();    // Combine with cached sum
}

void function_pointer_simulation() {
    // Simulate function pointers using conditional calls
    int operation = 2;
    int operand = 6;
    int result = 0;
    
    if (operation == 1) {
        result = power(operand, 2);
    } else if (operation == 2) {
        result = gcd(operand, 15);
    } else if (operation == 3) {
        result = mutual_recursion_a(operand);
    } else {
        result = operand * 2;
    }
    
    cache_computation(result);
}

void setup() {
    // Initialize cache
    cache_index = 0;
    
    // Test recursive power function
    int power_result = power(3, 4);  // 3^4 = 81
    
    // Test iterative GCD function
    int gcd_result = gcd(48, 18);  // Should be 6
    
    // Test function with global state modification
    cache_computation(power_result);
    cache_computation(gcd_result);
    
    // Test mutual recursion (small values for embedded)
    int mutual_result = mutual_recursion_a(3);  // Should be 0
    
    // Test complex function chain
    int chain_result = complex_function_chain(4);
    
    // Test function pointer simulation
    function_pointer_simulation();
    
    // Get final cached sum
    int final_sum = get_cached_sum();
    
    // Test nested function calls in expression
    int combined = power(2, 3) + gcd(final_sum, 10);
    
    printf("Complex functions: pow=%d, gcd=%d, mutual=%d, chain=%d, sum=%d, combined=%d\n",
           power_result, gcd_result, mutual_result, chain_result, final_sum, combined);
}
Parse tree: (program (declaration (type int) computation_cache [ 5 ] ;) (declaration (type int) cache_index ;) (functionDefinition (type int) power ( (parameterList (parameter (type int) base) , (parameter (type int) exponent)) ) (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression exponent)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ;)) })))) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression exponent)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ) (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression base))))))))))))) ;)) })))) (statement (declaration (type int) half_power = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall power ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression base))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression exponent) / (primaryExpression 2)))))))))))))) ))))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression exponent) % (primaryExpression 2)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression half_power) * (primaryExpression half_power))))))))))))) ;)) })) else (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression base) * (primaryExpression half_power) * (primaryExpression half_power))))))))))))) ;)) })))) })) (functionDefinition (type int) gcd ( (parameterList (parameter (type int) a) , (parameter (type int) b)) ) (compoundStatement { (statement (whileStatement while ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b)))) (comparisonOperator !=) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (declaration (type int) temp = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a) % (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression temp))))))))))))))) ;)) })))) (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))))))))) ;)) })) (functionDefinition (type void) cache_computation ( (parameterList (parameter (type int) value)) ) (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression cache_index)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment computation_cache [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression cache_index))))))))))))) ] = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression value))))))))))))))) ;)) (statement (expressionStatement (expression (assignment cache_index = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression cache_index)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) })) (functionDefinition (type int) get_cached_sum ( ) (compoundStatement { (statement (declaration (type int) sum = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (declaration (type int) i = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (whileStatement while ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression cache_index))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment sum = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sum)) + (multiplicativeExpression (primaryExpression computation_cache [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i))))))))))))) ]))))))))))))))) ;)) (statement (expressionStatement (expression (assignment i = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sum))))))))))))) ;)) })) (functionDeclaration (type int) mutual_recursion_a ( (parameterList (parameter (type int) n)) ) ;) (functionDeclaration (type int) mutual_recursion_b ( (parameterList (parameter (type int) n)) ) ;) (functionDefinition (type int) mutual_recursion_a ( (parameterList (parameter (type int) n)) ) (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression n)))) (comparisonOperator <=) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ;)) })) else (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall mutual_recursion_b ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression n)) - (multiplicativeExpression (primaryExpression 1)))))))))))))) ))))))))))))))) ;)) })))) })) (functionDefinition (type int) mutual_recursion_b ( (parameterList (parameter (type int) n)) ) (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression n)))) (comparisonOperator <=) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) })) else (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall mutual_recursion_a ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression n)) - (multiplicativeExpression (primaryExpression 1)))))))))))))) ))))))))))))))) ;)) })))) })) (functionDefinition (type int) complex_function_chain ( (parameterList (parameter (type int) input)) ) (compoundStatement { (statement (declaration (type int) step1 = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall power ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression input))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) step2 = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall gcd ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression step1))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 24)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall cache_computation ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression step2)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) step3 = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall mutual_recursion_a ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression step2) % (primaryExpression 4)))))))))))))) ))))))))))))))) ;)) (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression step3)) + (multiplicativeExpression (primaryExpression (functionCall get_cached_sum ( ))))))))))))))) ;)) })) (functionDefinition (type void) function_pointer_simulation ( ) (compoundStatement { (statement (declaration (type int) operation = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))) ;)) (statement (declaration (type int) operand = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 6))))))))))))) ;)) (statement (declaration (type int) result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression operation)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall power ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression operand))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2)))))))))))))) ))))))))))))))))) ;)) })) else (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression operation)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall gcd ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression operand))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 15)))))))))))))) ))))))))))))))))) ;)) })) else (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression operation)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall mutual_recursion_a ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression operand)))))))))))))) ))))))))))))))))) ;)) })) else (statement (compoundStatement { (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression operand) * (primaryExpression 2))))))))))))))) ;)) })))))))) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall cache_computation ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) })) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment cache_index = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))))) ;)) (statement (declaration (type int) power_result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall power ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) gcd_result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall gcd ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 48))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 18)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall cache_computation ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression power_result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall cache_computation ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression gcd_result)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) mutual_result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall mutual_recursion_a ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) chain_result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall complex_function_chain ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall function_pointer_simulation ( ))))))))))))))) ;)) (statement (declaration (type int) final_sum = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall get_cached_sum ( ))))))))))))))) ;)) (statement (declaration (type int) combined = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall power ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3)))))))))))))) )))) + (multiplicativeExpression (primaryExpression (functionCall gcd ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression final_sum))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Complex functions: pow=%d, gcd=%d, mutual=%d, chain=%d, sum=%d, combined=%d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression power_result))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression gcd_result))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression mutual_result))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression chain_result))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression final_sum))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression combined)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared array: computation_cache[5] (int)
Declared variable: cache_index (int)
Compiling function: power
Registered function: power at address 4
Function parameter: base (int)
Function parameter: exponent (int)
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: half_power (int)
Initializing variable: half_power
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: power (placeholder)
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: gcd
Registered function: gcd at address 40
Function parameter: a (int)
Function parameter: b (int)
Compiling while statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: temp (int)
Initializing variable: temp
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: cache_computation
Registered function: cache_computation at address 56
Function parameter: value (int)
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated array assignment: computation_cache[index] = value
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: cache_index = <expression>
Compiling function: get_cached_sum
Registered function: get_cached_sum at address 68
Declared variable: sum (int)
Initializing variable: sum
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: i (int)
Initializing variable: i
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling while statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: sum = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: i = <expression>
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declaring function prototype: mutual_recursion_a
Declaring function prototype: mutual_recursion_b
Compiling function: mutual_recursion_a
Registered function: mutual_recursion_a at address 89
Function parameter: n (int)
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated function call: mutual_recursion_b (placeholder)
Compiling function: mutual_recursion_b
Registered function: mutual_recursion_b at address 102
Function parameter: n (int)
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated function call: mutual_recursion_a (placeholder)
Compiling function: complex_function_chain
Registered function: complex_function_chain at address 115
Function parameter: input (int)
Declared variable: step1 (int)
Initializing variable: step1
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: power (placeholder)
Declared variable: step2 (int)
Initializing variable: step2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: gcd (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: cache_computation (placeholder)
Declared variable: step3 (int)
Initializing variable: step3
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: mutual_recursion_a (placeholder)
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated function call: get_cached_sum (placeholder)
Compiling function: function_pointer_simulation
Registered function: function_pointer_simulation at address 135
Declared variable: operation (int)
Initializing variable: operation
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: operand (int)
Initializing variable: operand
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: result (int)
Initializing variable: result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: power (placeholder)
Generated assignment: result = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: gcd (placeholder)
Generated assignment: result = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: mutual_recursion_a (placeholder)
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: cache_computation (placeholder)
Compiling function: setup
Registered function: setup at address 174
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: cache_index = <expression>
Declared variable: power_result (int)
Initializing variable: power_result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: power (placeholder)
Declared variable: gcd_result (int)
Initializing variable: gcd_result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: gcd (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: cache_computation (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: cache_computation (placeholder)
Declared variable: mutual_result (int)
Initializing variable: mutual_result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: mutual_recursion_a (placeholder)
Declared variable: chain_result (int)
Initializing variable: chain_result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: complex_function_chain (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: function_pointer_simulation (placeholder)
Declared variable: final_sum (int)
Initializing variable: final_sum
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: get_cached_sum (placeholder)
Declared variable: combined (int)
Initializing variable: combined
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: power (placeholder)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: gcd (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 6 args, string_index=0
Resolved function call: setup to address 174
Resolved function call: power to address 4
Resolved function call: mutual_recursion_b to address 102
Resolved function call: mutual_recursion_a to address 89
Resolved function call: power to address 4
Resolved function call: gcd to address 40
Resolved function call: cache_computation to address 56
Resolved function call: mutual_recursion_a to address 89
Resolved function call: get_cached_sum to address 68
Resolved function call: power to address 4
Resolved function call: gcd to address 40
Resolved function call: mutual_recursion_a to address 89
Resolved function call: cache_computation to address 56
Resolved function call: power to address 4
Resolved function call: gcd to address 40
Resolved function call: cache_computation to address 56
Resolved function call: cache_computation to address 56
Resolved function call: mutual_recursion_a to address 89
Resolved function call: complex_function_chain to address 115
Resolved function call: function_pointer_simulation to address 135
Resolved function call: get_cached_sum to address 68
Resolved function call: power to address 4
Resolved function call: gcd to address 40
Compilation complete. Generated 214 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  computation_cache (scope=0, type=array, datatype=int, global=1, globalIndex=9, arraySize=5, arrayId=0)
  cache_index (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  power (scope=0, type=func, datatype=int, global=1, globalIndex=11)
  gcd (scope=0, type=func, datatype=int, global=1, globalIndex=12)
  cache_computation (scope=0, type=func, datatype=void, global=1, globalIndex=13)
  get_cached_sum (scope=0, type=func, datatype=int, global=1, globalIndex=14)
  mutual_recursion_a (scope=0, type=func, datatype=int, global=1, globalIndex=15)
  mutual_recursion_b (scope=0, type=func, datatype=int, global=1, globalIndex=16)
  complex_function_chain (scope=0, type=func, datatype=int, global=1, globalIndex=17)
  function_pointer_simulation (scope=0, type=func, datatype=void, global=1, globalIndex=18)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=19)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=174 (encoded: 0x80000ae)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x56 flags=0x0 immediate=0 (encoded: 0x56000000)
3: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
4: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
5: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
6: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
7: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
8: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
9: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
10: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
11: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
12: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
13: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
14: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
15: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
16: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
17: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
18: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
19: opcode=0x6 flags=0x0 immediate=0 (encoded: 0x6000000)
20: opcode=0x8 flags=0x0 immediate=4 (encoded: 0x8000004)
21: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
22: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
23: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
24: opcode=0x7 flags=0x0 immediate=0 (encoded: 0x7000000)
25: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
26: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
27: opcode=0x32 flags=0x0 immediate=5 (encoded: 0x32000005)
28: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
29: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
30: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
31: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
32: opcode=0x30 flags=0x0 immediate=6 (encoded: 0x30000006)
33: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
34: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
35: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
36: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
37: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
38: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
39: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
40: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
41: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
42: opcode=0x21 flags=0x0 immediate=0 (encoded: 0x21000000)
43: opcode=0x32 flags=0x0 immediate=9 (encoded: 0x32000009)
44: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
45: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
46: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
47: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
48: opcode=0x7 flags=0x0 immediate=0 (encoded: 0x7000000)
49: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
50: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
51: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
52: opcode=0x30 flags=0x0 immediate=65523 (encoded: 0x3000fff3)
53: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
54: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
55: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
56: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
57: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
58: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
59: opcode=0x32 flags=0x0 immediate=7 (encoded: 0x32000007)
60: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
61: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
62: opcode=0x55 flags=0x0 immediate=0 (encoded: 0x55000000)
63: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
64: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
65: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
66: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
67: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
68: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
69: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
70: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
71: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
72: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
73: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
74: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
75: opcode=0x32 flags=0x0 immediate=10 (encoded: 0x3200000a)
76: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
77: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
78: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
79: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
80: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
81: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
82: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
83: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
84: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
85: opcode=0x30 flags=0x0 immediate=65522 (encoded: 0x3000fff2)
86: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
87: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
88: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
89: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
90: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
91: opcode=0x24 flags=0x0 immediate=0 (encoded: 0x24000000)
92: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
93: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
94: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
95: opcode=0x30 flags=0x0 immediate=5 (encoded: 0x30000005)
96: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
97: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
98: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
99: opcode=0x8 flags=0x0 immediate=102 (encoded: 0x8000066)
100: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
101: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
102: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
103: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
104: opcode=0x24 flags=0x0 immediate=0 (encoded: 0x24000000)
105: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
106: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
107: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
108: opcode=0x30 flags=0x0 immediate=5 (encoded: 0x30000005)
109: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
110: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
111: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
112: opcode=0x8 flags=0x0 immediate=89 (encoded: 0x8000059)
113: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
114: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
115: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
116: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
117: opcode=0x8 flags=0x0 immediate=4 (encoded: 0x8000004)
118: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
119: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
120: opcode=0x1 flags=0x0 immediate=24 (encoded: 0x1000018)
121: opcode=0x8 flags=0x0 immediate=40 (encoded: 0x8000028)
122: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
123: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
124: opcode=0x8 flags=0x0 immediate=56 (encoded: 0x8000038)
125: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
126: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
127: opcode=0x7 flags=0x0 immediate=0 (encoded: 0x7000000)
128: opcode=0x8 flags=0x0 immediate=89 (encoded: 0x8000059)
129: opcode=0x53 flags=0x0 immediate=3 (encoded: 0x53000003)
130: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
131: opcode=0x8 flags=0x0 immediate=68 (encoded: 0x8000044)
132: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
133: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
134: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
135: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
136: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
137: opcode=0x1 flags=0x0 immediate=6 (encoded: 0x1000006)
138: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
139: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
140: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
141: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
142: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
143: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
144: opcode=0x32 flags=0x0 immediate=5 (encoded: 0x32000005)
145: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
146: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
147: opcode=0x8 flags=0x0 immediate=4 (encoded: 0x8000004)
148: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
149: opcode=0x30 flags=0x0 immediate=21 (encoded: 0x30000015)
150: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
151: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
152: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
153: opcode=0x32 flags=0x0 immediate=5 (encoded: 0x32000005)
154: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
155: opcode=0x1 flags=0x0 immediate=15 (encoded: 0x100000f)
156: opcode=0x8 flags=0x0 immediate=40 (encoded: 0x8000028)
157: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
158: opcode=0x30 flags=0x0 immediate=12 (encoded: 0x3000000c)
159: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
160: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
161: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
162: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
163: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
164: opcode=0x8 flags=0x0 immediate=89 (encoded: 0x8000059)
165: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
166: opcode=0x30 flags=0x0 immediate=4 (encoded: 0x30000004)
167: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
168: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
169: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
170: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
171: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
172: opcode=0x8 flags=0x0 immediate=56 (encoded: 0x8000038)
173: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
174: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
175: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
176: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
177: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
178: opcode=0x8 flags=0x0 immediate=4 (encoded: 0x8000004)
179: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
180: opcode=0x1 flags=0x0 immediate=48 (encoded: 0x1000030)
181: opcode=0x1 flags=0x0 immediate=18 (encoded: 0x1000012)
182: opcode=0x8 flags=0x0 immediate=40 (encoded: 0x8000028)
183: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
184: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
185: opcode=0x8 flags=0x0 immediate=56 (encoded: 0x8000038)
186: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
187: opcode=0x8 flags=0x0 immediate=56 (encoded: 0x8000038)
188: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
189: opcode=0x8 flags=0x0 immediate=89 (encoded: 0x8000059)
190: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
191: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
192: opcode=0x8 flags=0x0 immediate=115 (encoded: 0x8000073)
193: opcode=0x53 flags=0x0 immediate=3 (encoded: 0x53000003)
194: opcode=0x8 flags=0x0 immediate=135 (encoded: 0x8000087)
195: opcode=0x8 flags=0x0 immediate=68 (encoded: 0x8000044)
196: opcode=0x53 flags=0x0 immediate=4 (encoded: 0x53000004)
197: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
198: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
199: opcode=0x8 flags=0x0 immediate=4 (encoded: 0x8000004)
200: opcode=0x52 flags=0x0 immediate=4 (encoded: 0x52000004)
201: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
202: opcode=0x8 flags=0x0 immediate=40 (encoded: 0x8000028)
203: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
204: opcode=0x53 flags=0x0 immediate=5 (encoded: 0x53000005)
205: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
206: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
207: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
208: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
209: opcode=0x52 flags=0x0 immediate=4 (encoded: 0x52000004)
210: opcode=0x52 flags=0x0 immediate=5 (encoded: 0x52000005)
211: opcode=0x1 flags=0x0 immediate=6 (encoded: 0x1000006)
212: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
213: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Complex functions: pow=%d, gcd=%d, mutual=%d, chain=%d, sum=%d, combined=%d\n"
Bytecode saved to: tests/test_complex_functions.bin
Compilation successful!
Compiling: tests/test_integration_control_functions.c
Source code:
/*
 * Integration Control Flow + Functions Test
 * Tests functions with control flow and complex interactions
 */

int global_counter;

int fibonacci(int n) {
    if (n <= 1) {
        return n;
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

int factorial(int n) {
    int result = 1;
    while (n > 1) {
        result = result * n;
        n = n - 1;
    }
    return result;
}

void count_down(int start) {
    while (start > 0) {
        global_counter = start;
        start = start - 1;
    }
}

int max_of_three(int a, int b, int c) {
    int max = a;
    if (b > max) {
        max = b;
    }
    if (c > max) {
        max = c;
    }
    return max;
}

void setup() {
    // Test recursive function (small values for embedded constraints)
    int fib5 = fibonacci(5);  // Should be 5
    
    // Test iterative function
    int fact4 = factorial(4);  // Should be 24
    
    // Test function that modifies global state
    count_down(3);
    // global_counter should be 1 (last value set)
    
    // Test function with complex control flow
    int maximum = max_of_three(10, 25, 15);  // Should be 25
    
    // Test function calls in control flow
    if (maximum > 20) {
        global_counter = factorial(3);  // Should be 6
    }
    
    // Test function calls in expressions
    int combined = fib5 + fact4;  // 5 + 24 = 29
    
    printf("Control+Functions integration: fib=%d, fact=%d, max=%d, combined=%d\n",
           fib5, fact4, maximum, combined);
}
Parse tree: (program (declaration (type int) global_counter ;) (functionDefinition (type int) fibonacci ( (parameterList (parameter (type int) n)) ) (compoundStatement { (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression n)))) (comparisonOperator <=) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ) (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression n))))))))))))) ;)) })) else (statement (compoundStatement { (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall fibonacci ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression n)) - (multiplicativeExpression (primaryExpression 1)))))))))))))) )))) + (multiplicativeExpression (primaryExpression (functionCall fibonacci ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression n)) - (multiplicativeExpression (primaryExpression 2)))))))))))))) ))))))))))))))) ;)) })))) })) (functionDefinition (type int) factorial ( (parameterList (parameter (type int) n)) ) (compoundStatement { (statement (declaration (type int) result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ;)) (statement (whileStatement while ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression n)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result) * (primaryExpression n))))))))))))))) ;)) (statement (expressionStatement (expression (assignment n = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression n)) - (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result))))))))))))) ;)) })) (functionDefinition (type void) count_down ( (parameterList (parameter (type int) start)) ) (compoundStatement { (statement (whileStatement while ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression start)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment global_counter = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression start))))))))))))))) ;)) (statement (expressionStatement (expression (assignment start = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression start)) - (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) })) (functionDefinition (type int) max_of_three ( (parameterList (parameter (type int) a) , (parameter (type int) b) , (parameter (type int) c)) ) (compoundStatement { (statement (declaration (type int) max = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression max))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment max = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) })))) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression c)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression max))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment max = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression c))))))))))))))) ;)) })))) (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression max))))))))))))) ;)) })) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (declaration (type int) fib5 = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall fibonacci ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) fact4 = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall factorial ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall count_down ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3)))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) maximum = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall max_of_three ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 25))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 15)))))))))))))) ))))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression maximum)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 20))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment global_counter = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall factorial ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3)))))))))))))) ))))))))))))))))) ;)) })))) (statement (declaration (type int) combined = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression fib5)) + (multiplicativeExpression (primaryExpression fact4))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Control+Functions integration: fib=%d, fact=%d, max=%d, combined=%d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression fib5))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression fact4))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression maximum))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression combined)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: global_counter (int)
Compiling function: fibonacci
Registered function: fibonacci at address 2
Function parameter: n (int)
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated function call: fibonacci (placeholder)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated function call: fibonacci (placeholder)
Compiling function: factorial
Registered function: factorial at address 20
Function parameter: n (int)
Declared variable: result (int)
Initializing variable: result
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling while statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: n = <expression>
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: count_down
Registered function: count_down at address 38
Function parameter: start (int)
Compiling while statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: global_counter = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: start = <expression>
Compiling function: max_of_three
Registered function: max_of_three at address 50
Function parameter: a (int)
Function parameter: b (int)
Function parameter: c (int)
Declared variable: max (int)
Initializing variable: max
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: max = <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: max = <expression>
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: setup
Registered function: setup at address 67
Declared variable: fib5 (int)
Initializing variable: fib5
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: fibonacci (placeholder)
Declared variable: fact4 (int)
Initializing variable: fact4
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: factorial (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: count_down (placeholder)
Declared variable: maximum (int)
Initializing variable: maximum
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: max_of_three (placeholder)
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: factorial (placeholder)
Generated assignment: global_counter = <expression>
Declared variable: combined (int)
Initializing variable: combined
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 4 args, string_index=0
Resolved function call: setup to address 67
Resolved function call: fibonacci to address 2
Resolved function call: fibonacci to address 2
Resolved function call: fibonacci to address 2
Resolved function call: factorial to address 20
Resolved function call: count_down to address 38
Resolved function call: max_of_three to address 50
Resolved function call: factorial to address 20
Compilation complete. Generated 98 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  global_counter (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  fibonacci (scope=0, type=func, datatype=int, global=1, globalIndex=10)
  factorial (scope=0, type=func, datatype=int, global=1, globalIndex=11)
  count_down (scope=0, type=func, datatype=void, global=1, globalIndex=12)
  max_of_three (scope=0, type=func, datatype=int, global=1, globalIndex=13)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=14)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=67 (encoded: 0x8000043)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
3: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
4: opcode=0x24 flags=0x0 immediate=0 (encoded: 0x24000000)
5: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
6: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
7: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
8: opcode=0x30 flags=0x0 immediate=10 (encoded: 0x3000000a)
9: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
10: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
11: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
12: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
13: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
14: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
15: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
16: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
17: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
18: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
19: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
20: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
21: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
22: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
23: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
24: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
25: opcode=0x32 flags=0x0 immediate=9 (encoded: 0x32000009)
26: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
27: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
28: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
29: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
30: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
31: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
32: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
33: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
34: opcode=0x30 flags=0x0 immediate=65523 (encoded: 0x3000fff3)
35: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
36: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
37: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
38: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
39: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
40: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
41: opcode=0x32 flags=0x0 immediate=7 (encoded: 0x32000007)
42: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
43: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
44: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
45: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
46: opcode=0x4 flags=0x0 immediate=0 (encoded: 0x4000000)
47: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
48: opcode=0x30 flags=0x0 immediate=65525 (encoded: 0x3000fff5)
49: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
50: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
51: opcode=0x53 flags=0x0 immediate=3 (encoded: 0x53000003)
52: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
53: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
54: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
55: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
56: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
57: opcode=0x53 flags=0x0 immediate=3 (encoded: 0x53000003)
58: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
59: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
60: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
61: opcode=0x32 flags=0x0 immediate=2 (encoded: 0x32000002)
62: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
63: opcode=0x53 flags=0x0 immediate=3 (encoded: 0x53000003)
64: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
65: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
66: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
67: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
68: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
69: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
70: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
71: opcode=0x8 flags=0x0 immediate=20 (encoded: 0x8000014)
72: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
73: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
74: opcode=0x8 flags=0x0 immediate=38 (encoded: 0x8000026)
75: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
76: opcode=0x1 flags=0x0 immediate=25 (encoded: 0x1000019)
77: opcode=0x1 flags=0x0 immediate=15 (encoded: 0x100000f)
78: opcode=0x8 flags=0x0 immediate=50 (encoded: 0x8000032)
79: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
80: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
81: opcode=0x1 flags=0x0 immediate=20 (encoded: 0x1000014)
82: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
83: opcode=0x32 flags=0x0 immediate=3 (encoded: 0x32000003)
84: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
85: opcode=0x8 flags=0x0 immediate=20 (encoded: 0x8000014)
86: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
87: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
88: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
89: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
90: opcode=0x53 flags=0x0 immediate=3 (encoded: 0x53000003)
91: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
92: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
93: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
94: opcode=0x52 flags=0x0 immediate=3 (encoded: 0x52000003)
95: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
96: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
97: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Control+Functions integration: fib=%d, fact=%d, max=%d, combined=%d\n"
Bytecode saved to: tests/test_integration_control_functions.bin
Compilation successful!
Compiling: tests/test_integration_expressions.c
Source code:
/*
 * Integration Expressions Test
 * Tests combinations of arithmetic, logical, and comparison operations
 */

int a;
int b;
int c;
int result;

void setup() {
    a = 10;
    b = 5;
    c = 3;
    
    // Combined arithmetic and comparison
    result = (a + b) > (c * 4);  // 15 > 12 = true (1)
    
    // Logical operations with comparisons
    result = (a > b) && (b > c);  // true && true = true (1)
    result = (a < b) || (b > c);  // false || true = true (1)
    
    // Complex logical expression
    result = !(a < b) && (c == 3);  // !false && true = true (1)
    
    // Mixed operators with precedence
    result = a + b * c > a * 2;  // 10 + 15 > 20 = 25 > 20 = true (1)
    
    // Nested parentheses
    result = ((a + b) * c) - (a * b);  // (15 * 3) - 50 = 45 - 50 = -5
    
    // Compound assignments in expressions
    a += b;  // a = 15
    result = (a > 12) && (a < 20);  // true && true = true (1)
    
    printf("Expression integration test complete: result=%d, a=%d\n", result, a);
}
Parse tree: (program (declaration (type int) a ;) (declaration (type int) b ;) (declaration (type int) c ;) (declaration (type int) result ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))))) ;)) (statement (expressionStatement (expression (assignment c = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)) + (multiplicativeExpression (primaryExpression b))))))))))))) ))))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression c) * (primaryExpression 4))))))))))))) )))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) )))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression c))))))))))))) )))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) ))))))))))) || (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression c))))))))))))) )))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression ! (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) ))))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression c)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))) )))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)) + (multiplicativeExpression (primaryExpression b) * (primaryExpression c)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a) * (primaryExpression 2))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)) + (multiplicativeExpression (primaryExpression b))))))))))))) )) * (primaryExpression c))))))))))))) ))) - (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a) * (primaryExpression b))))))))))))) )))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a += (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 12))))))))))))) )))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 20))))))))))))) )))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Expression integration test complete: result=%d, a=%d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: a (int)
Declared variable: b (int)
Declared variable: c (int)
Declared variable: result (int)
Compiling function: setup
Registered function: setup at address 2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: c = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: a += <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 2 args, string_index=0
Resolved function call: setup to address 2
Compilation complete. Generated 90 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  a (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  b (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  c (scope=0, type=var, datatype=int, global=1, globalIndex=11)
  result (scope=0, type=var, datatype=int, global=1, globalIndex=12)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=13)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
3: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
4: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
5: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
6: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
7: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
8: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
9: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
10: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
11: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
12: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
13: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
14: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
15: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
16: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
17: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
18: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
19: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
20: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
21: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
22: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
23: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
24: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
25: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
26: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
27: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
28: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
29: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
30: opcode=0x31 flags=0x0 immediate=4 (encoded: 0x31000004)
31: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
32: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
33: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
34: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
35: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
36: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
37: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
38: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
39: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
40: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
41: opcode=0x42 flags=0x0 immediate=0 (encoded: 0x42000000)
42: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
43: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
44: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
45: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
46: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
47: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
48: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
49: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
50: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
51: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
52: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
53: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
54: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
55: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
56: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
57: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
58: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
59: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
60: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
61: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
62: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
63: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
64: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
65: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
66: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
67: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
68: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
69: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
70: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
71: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
72: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
73: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
74: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
75: opcode=0x1 flags=0x0 immediate=12 (encoded: 0x100000c)
76: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
77: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
78: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
79: opcode=0x1 flags=0x0 immediate=20 (encoded: 0x1000014)
80: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
81: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
82: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
83: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
84: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
85: opcode=0x50 flags=0x0 immediate=12 (encoded: 0x5000000c)
86: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
87: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
88: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
89: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Expression integration test complete: result=%d, a=%d\n"
Bytecode saved to: tests/test_integration_expressions.bin
Compilation successful!
Compiling: tests/test_integration_memory.c
Source code:
/*
 * Integration Memory Test
 * Tests memory usage patterns and variable interactions
 */

int global_array[10];
int global_sum;
int temp_var;

void init_array() {
    int i = 0;
    while (i < 10) {
        global_array[i] = i * 2;  // 0, 2, 4, 6, 8, 10, 12, 14, 16, 18
        i = i + 1;
    }
}

int calculate_sum() {
    int sum = 0;
    int i = 0;
    while (i < 10) {
        sum = sum + global_array[i];
        i = i + 1;
    }
    return sum;  // Should be 90
}

void swap_values(int a, int b) {
    temp_var = a;
    global_array[0] = b;
    global_array[1] = temp_var;
}

void setup() {
    // Initialize array through function
    init_array();
    
    // Calculate sum using array values
    global_sum = calculate_sum();
    
    // Test variable interactions
    temp_var = global_array[5];  // Should be 10
    
    // Test function with multiple variable modifications
    swap_values(global_array[2], global_array[3]);  // Swap 4 and 6
    
    // Verify changes
    int first = global_array[0];  // Should be 6
    int second = global_array[1]; // Should be 4
    
    // Test memory access patterns
    int middle_sum = global_array[4] + global_array[5] + global_array[6];
    // 8 + 10 + 12 = 30
    
    printf("Memory integration test: sum=%d, temp=%d, middle=%d\n", 
           global_sum, temp_var, middle_sum);
}
Parse tree: (program (declaration (type int) global_array [ 10 ] ;) (declaration (type int) global_sum ;) (declaration (type int) temp_var ;) (functionDefinition (type void) init_array ( ) (compoundStatement { (statement (declaration (type int) i = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (whileStatement while ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment global_array [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i))))))))))))) ] = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i) * (primaryExpression 2))))))))))))))) ;)) (statement (expressionStatement (expression (assignment i = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) })) (functionDefinition (type int) calculate_sum ( ) (compoundStatement { (statement (declaration (type int) sum = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (declaration (type int) i = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ;)) (statement (whileStatement while ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i)))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment sum = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sum)) + (multiplicativeExpression (primaryExpression global_array [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i))))))))))))) ]))))))))))))))) ;)) (statement (expressionStatement (expression (assignment i = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression i)) + (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) })))) (statement (returnStatement return (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression sum))))))))))))) ;)) })) (functionDefinition (type void) swap_values ( (parameterList (parameter (type int) a) , (parameter (type int) b)) ) (compoundStatement { (statement (expressionStatement (expression (assignment temp_var = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))))))))))) ;)) (statement (expressionStatement (expression (assignment global_array [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ] = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))))) ;)) (statement (expressionStatement (expression (assignment global_array [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ] = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression temp_var))))))))))))))) ;)) })) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall init_array ( ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment global_sum = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall calculate_sum ( ))))))))))))))))) ;)) (statement (expressionStatement (expression (assignment temp_var = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression global_array [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))) ]))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall swap_values ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression global_array [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))) ]))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression global_array [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))) ])))))))))))))) ))))))))))))))) ;)) (statement (declaration (type int) first = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression global_array [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ]))))))))))))) ;)) (statement (declaration (type int) second = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression global_array [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) ]))))))))))))) ;)) (statement (declaration (type int) middle_sum = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression global_array [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 4))))))))))))) ])) + (multiplicativeExpression (primaryExpression global_array [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))) ])) + (multiplicativeExpression (primaryExpression global_array [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 6))))))))))))) ]))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Memory integration test: sum=%d, temp=%d, middle=%d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression global_sum))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression temp_var))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression middle_sum)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared array: global_array[10] (int)
Declared variable: global_sum (int)
Declared variable: temp_var (int)
Compiling function: init_array
Registered function: init_array at address 4
Declared variable: i (int)
Initializing variable: i
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling while statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated array assignment: global_array[index] = value
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: i = <expression>
Compiling function: calculate_sum
Registered function: calculate_sum at address 21
Declared variable: sum (int)
Initializing variable: sum
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: i (int)
Initializing variable: i
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling while statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: sum = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: i = <expression>
Compiling return statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling function: swap_values
Registered function: swap_values at address 42
Function parameter: a (int)
Function parameter: b (int)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: temp_var = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated array assignment: global_array[index] = value
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated array assignment: global_array[index] = value
Compiling function: setup
Registered function: setup at address 51
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: init_array (placeholder)
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: calculate_sum (placeholder)
Generated assignment: global_sum = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: temp_var = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated function call: swap_values (placeholder)
Declared variable: first (int)
Initializing variable: first
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: second (int)
Initializing variable: second
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Declared variable: middle_sum (int)
Initializing variable: middle_sum
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 3 args, string_index=0
Resolved function call: setup to address 51
Resolved function call: init_array to address 4
Resolved function call: calculate_sum to address 21
Resolved function call: swap_values to address 42
Compilation complete. Generated 83 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  global_array (scope=0, type=array, datatype=int, global=1, globalIndex=9, arraySize=10, arrayId=0)
  global_sum (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  temp_var (scope=0, type=var, datatype=int, global=1, globalIndex=11)
  init_array (scope=0, type=func, datatype=void, global=1, globalIndex=12)
  calculate_sum (scope=0, type=func, datatype=int, global=1, globalIndex=13)
  swap_values (scope=0, type=func, datatype=void, global=1, globalIndex=14)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=15)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=51 (encoded: 0x8000033)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x56 flags=0x0 immediate=0 (encoded: 0x56000000)
3: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
4: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
5: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
6: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
7: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
8: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
9: opcode=0x32 flags=0x0 immediate=10 (encoded: 0x3200000a)
10: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
11: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
12: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
13: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
14: opcode=0x55 flags=0x0 immediate=0 (encoded: 0x55000000)
15: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
16: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
17: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
18: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
19: opcode=0x30 flags=0x0 immediate=65522 (encoded: 0x3000fff2)
20: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
21: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
22: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
23: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
24: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
25: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
26: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
27: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
28: opcode=0x32 flags=0x0 immediate=10 (encoded: 0x3200000a)
29: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
30: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
31: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
32: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
33: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
34: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
35: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
36: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
37: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
38: opcode=0x30 flags=0x0 immediate=65522 (encoded: 0x3000fff2)
39: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
40: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
41: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
42: opcode=0x52 flags=0x0 immediate=0 (encoded: 0x52000000)
43: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
44: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
45: opcode=0x52 flags=0x0 immediate=1 (encoded: 0x52000001)
46: opcode=0x55 flags=0x0 immediate=0 (encoded: 0x55000000)
47: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
48: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
49: opcode=0x55 flags=0x0 immediate=0 (encoded: 0x55000000)
50: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)
51: opcode=0x8 flags=0x0 immediate=4 (encoded: 0x8000004)
52: opcode=0x8 flags=0x0 immediate=21 (encoded: 0x8000015)
53: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
54: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
55: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
56: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
57: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
58: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
59: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
60: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
61: opcode=0x8 flags=0x0 immediate=42 (encoded: 0x800002a)
62: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
63: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
64: opcode=0x53 flags=0x0 immediate=0 (encoded: 0x53000000)
65: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
66: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
67: opcode=0x53 flags=0x0 immediate=1 (encoded: 0x53000001)
68: opcode=0x1 flags=0x0 immediate=4 (encoded: 0x1000004)
69: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
70: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
71: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
72: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
73: opcode=0x1 flags=0x0 immediate=6 (encoded: 0x1000006)
74: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
75: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
76: opcode=0x53 flags=0x0 immediate=2 (encoded: 0x53000002)
77: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
78: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
79: opcode=0x52 flags=0x0 immediate=2 (encoded: 0x52000002)
80: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
81: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
82: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Memory integration test: sum=%d, temp=%d, middle=%d\n"
Bytecode saved to: tests/test_integration_memory.bin
Compilation successful!
Compiling: tests/test_integration_operators.c
Source code:
/*
 * Integration Operators Test
 * Tests all implemented operators working together
 */

int a;
int b;
int result;

void setup() {
    a = 12;  // 1100 in binary
    b = 10;  // 1010 in binary
    
    // Bitwise operations combined with arithmetic
    result = (a & b) + (a | b);  // 8 + 14 = 22
    
    // Bitwise XOR with comparison
    result = (a ^ b) == 6;  // 6 == 6 = true (1)
    
    // Shift operations with arithmetic
    a = 5;
    result = (a << 2) + (a >> 1);  // 20 + 2 = 22
    
    // Bitwise NOT with logical operations
    a = 15;  // 1111 in binary
    result = (~a == -16) && (a > 0);  // true && true = true (1)
    
    // Compound bitwise assignments
    a = 12;
    a &= 7;   // a = 4 (1100 & 0111 = 0100)
    a |= 2;   // a = 6 (0100 | 0010 = 0110)
    a ^= 3;   // a = 5 (0110 ^ 0011 = 0101)
    a <<= 1;  // a = 10 (0101 << 1 = 1010)
    a >>= 2;  // a = 2 (1010 >> 2 = 0010)
    
    // Mixed operators with control flow
    if ((a & 3) == 2) {  // 2 & 3 = 2
        result = a | 8;  // 2 | 8 = 10
    }
    
    // Complex expression combining all operator types
    b = 7;
    result = ((a + b) > 8) && ((a | b) < 16) && !(a == 0);
    // (9 > 8) && (7 < 16) && true = true && true && true = true (1)
    
    printf("Operators integration test: a=%d, b=%d, result=%d\n", a, b, result);
}
Parse tree: (program (declaration (type int) a ;) (declaration (type int) b ;) (declaration (type int) result ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 12))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))) & (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) ))) + (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) )))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))))) ^ (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) ))))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 6))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))) << (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))) ))) + (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))) >> (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))) )))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 15))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression ~ (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression - 16)))))))))))))) )))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) )))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 12))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a &= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 7))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a |= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a ^= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a <<= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 1))))))))))))))) ;)) (statement (expressionStatement (expression (assignment a >>= (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) (statement (ifStatement if ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))) & (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 3))))))))))))) ))))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))) ) (statement (compoundStatement { (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 8))))))))))))))) ;)) })))) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 7))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)) + (multiplicativeExpression (primaryExpression b))))))))))))) ))))) (comparisonOperator >) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 8))))))))))))) )))))))))) && (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))) | (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) ))))) (comparisonOperator <) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 16))))))))))))) )))))))))) && (logicalNotExpression ! (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression ( (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)))) (comparisonOperator ==) (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 0))))))))))))) ))))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Operators integration test: a=%d, b=%d, result=%d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression b))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: a (int)
Declared variable: b (int)
Declared variable: result (int)
Compiling function: setup
Registered function: setup at address 2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: a &= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: a |= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: a ^= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: a <<= <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated compound assignment: a >>= <expression>
Compiling if statement
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical/bitwise NOT expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 3 args, string_index=0
Resolved function call: setup to address 2
Compilation complete. Generated 104 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  a (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  b (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  result (scope=0, type=var, datatype=int, global=1, globalIndex=11)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=12)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=12 (encoded: 0x100000c)
3: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
4: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
5: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
6: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
7: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
8: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
9: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
10: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
11: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
12: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
13: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
14: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
15: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
16: opcode=0x62 flags=0x0 immediate=0 (encoded: 0x62000000)
17: opcode=0x1 flags=0x0 immediate=6 (encoded: 0x1000006)
18: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
19: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
20: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
21: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
22: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
23: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
24: opcode=0x64 flags=0x0 immediate=0 (encoded: 0x64000000)
25: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
26: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
27: opcode=0x65 flags=0x0 immediate=0 (encoded: 0x65000000)
28: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
29: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
30: opcode=0x1 flags=0x0 immediate=15 (encoded: 0x100000f)
31: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
32: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
33: opcode=0x1 flags=0x1 immediate=65520 (encoded: 0x101fff0)
34: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
35: opcode=0x63 flags=0x0 immediate=0 (encoded: 0x63000000)
36: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
37: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
38: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
39: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
40: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
41: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
42: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
43: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
44: opcode=0x1 flags=0x0 immediate=12 (encoded: 0x100000c)
45: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
46: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
47: opcode=0x1 flags=0x0 immediate=7 (encoded: 0x1000007)
48: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
49: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
50: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
51: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
52: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
53: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
54: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
55: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
56: opcode=0x62 flags=0x0 immediate=0 (encoded: 0x62000000)
57: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
58: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
59: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
60: opcode=0x64 flags=0x0 immediate=0 (encoded: 0x64000000)
61: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
62: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
63: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
64: opcode=0x65 flags=0x0 immediate=0 (encoded: 0x65000000)
65: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
66: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
67: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
68: opcode=0x60 flags=0x0 immediate=0 (encoded: 0x60000000)
69: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
70: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
71: opcode=0x32 flags=0x0 immediate=4 (encoded: 0x32000004)
72: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
73: opcode=0x1 flags=0x0 immediate=8 (encoded: 0x1000008)
74: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
75: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
76: opcode=0x1 flags=0x0 immediate=7 (encoded: 0x1000007)
77: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
78: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
79: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
80: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
81: opcode=0x1 flags=0x0 immediate=8 (encoded: 0x1000008)
82: opcode=0x23 flags=0x0 immediate=0 (encoded: 0x23000000)
83: opcode=0x32 flags=0x0 immediate=11 (encoded: 0x3200000b)
84: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
85: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
86: opcode=0x61 flags=0x0 immediate=0 (encoded: 0x61000000)
87: opcode=0x1 flags=0x0 immediate=16 (encoded: 0x1000010)
88: opcode=0x22 flags=0x0 immediate=0 (encoded: 0x22000000)
89: opcode=0x32 flags=0x0 immediate=5 (encoded: 0x32000005)
90: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
91: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
92: opcode=0x20 flags=0x0 immediate=0 (encoded: 0x20000000)
93: opcode=0x42 flags=0x0 immediate=0 (encoded: 0x42000000)
94: opcode=0x30 flags=0x0 immediate=2 (encoded: 0x30000002)
95: opcode=0x2 flags=0x0 immediate=0 (encoded: 0x2000000)
96: opcode=0x1 flags=0x0 immediate=0 (encoded: 0x1000000)
97: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
98: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
99: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
100: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
101: opcode=0x1 flags=0x0 immediate=3 (encoded: 0x1000003)
102: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
103: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Operators integration test: a=%d, b=%d, result=%d\n"
Bytecode saved to: tests/test_integration_operators.bin
Compilation successful!
Compiling: tests/test_runner.c
Source code:
#include "test_framework.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

// Test execution implementation
bool run_single_test(const char* test_file, test_result_t* result) {
    char compile_cmd[512];
    char output_file[256];
    
    // Initialize result
    result->test_name = test_file;
    result->passed = false;
    result->instruction_count = 0;
    result->memory_used = 0;
    result->error_message = NULL;
    
    // Generate output filename
    snprintf(output_file, sizeof(output_file), "%s.bin", test_file);
    
    // Build compile command
    snprintf(compile_cmd, sizeof(compile_cmd), 
             "cd ../build && ./arduino_compiler ../tests/%s > compilation_output.txt 2>&1", 
             test_file);
    
    // Execute compilation
    int compile_result = system(compile_cmd);
    if (compile_result != 0) {
        result->error_message = "Compilation failed";
        return false;
    }
    
    // Parse compilation output for metrics
    FILE* output = fopen("../build/compilation_output.txt", "r");
    if (output) {
        char line[256];
        while (fgets(line, sizeof(line), output)) {
            if (strstr(line, "Generated") && strstr(line, "instructions")) {
                sscanf(line, "Compilation complete. Generated %u instructions.", 
                       &result->instruction_count);
            }
        }
        fclose(output);
    }
    
    // Estimate memory usage (simplified calculation)
    result->memory_used = result->instruction_count * 2 + 256; // Instructions + globals estimate
    
    // Validate performance
    if (!validate_performance_metrics(result)) {
        result->error_message = "Performance metrics exceeded limits";
        return false;
    }
    
    result->passed = true;
    return true;
}

bool validate_performance_metrics(const test_result_t* result) {
    if (result->instruction_count > MAX_TEST_INSTRUCTIONS) {
        return false;
    }
    if (result->memory_used > MAX_TEST_MEMORY) {
        return false;
    }
    return true;
}

void print_test_result(const test_result_t* result) {
    printf("%-40s: %s", result->test_name, result->passed ? "PASS" : "FAIL");
    
    if (result->passed) {
        printf(" [%u instr, %u bytes", result->instruction_count, result->memory_used);
        
        // Add warnings for high resource usage
        if (result->instruction_count > WARNING_INSTRUCTION_THRESHOLD) {
            printf(" ⚠️HIGH-INSTR");
        }
        if (result->memory_used > WARNING_MEMORY_THRESHOLD) {
            printf(" ⚠️HIGH-MEM");
        }
        printf("]");
    } else if (result->error_message) {
        printf(" - %s", result->error_message);
    }
    
    printf("\n");
}

void print_test_summary(test_result_t* results, int count) {
    int passed = 0;
    uint32_t total_instructions = 0;
    uint32_t max_memory = 0;
    
    printf("\n=== TEST SUMMARY ===\n");
    
    for (int i = 0; i < count; i++) {
        if (results[i].passed) {
            passed++;
            total_instructions += results[i].instruction_count;
            if (results[i].memory_used > max_memory) {
                max_memory = results[i].memory_used;
            }
        }
    }
    
    printf("Tests passed: %d/%d (%.1f%%)\n", passed, count, (passed * 100.0) / count);
    if (passed > 0) {
        printf("Total instructions: %u\n", total_instructions);
        printf("Peak memory usage: %u bytes (%.1f%% of 8KB)\n", 
               max_memory, (max_memory * 100.0) / 8192);
    }
    
    if (passed == count) {
        printf("✅ ALL TESTS PASSED - Phase 3 ready for handoff\n");
    } else {
        printf("❌ %d tests failed - Phase 3 needs fixes\n", count - passed);
    }
}

// Test category runners
int run_basic_tests() {
    printf("=== BASIC TESTS ===\n");
    
    const char* basic_tests[] = {
        "test_basic_arithmetic.c",
        "test_basic_assignments.c", 
        "test_basic_variables.c",
        "test_basic_functions.c",
        "test_basic_control_flow.c"
    };
    
    int test_count = sizeof(basic_tests) / sizeof(basic_tests[0]);
    test_result_t results[test_count];
    
    for (int i = 0; i < test_count; i++) {
        run_single_test(basic_tests[i], &results[i]);
        print_test_result(&results[i]);
    }
    
    print_test_summary(results, test_count);
    return 0;
}

int run_integration_tests() {
    printf("=== INTEGRATION TESTS ===\n");
    
    const char* integration_tests[] = {
        "test_integration_expressions.c",
        "test_integration_control_functions.c",
        "test_integration_operators.c",
        "test_integration_memory.c"
    };
    
    int test_count = sizeof(integration_tests) / sizeof(integration_tests[0]);
    test_result_t results[test_count];
    
    for (int i = 0; i < test_count; i++) {
        run_single_test(integration_tests[i], &results[i]);
        print_test_result(&results[i]);
    }
    
    print_test_summary(results, test_count);
    return 0;
}

int run_complex_tests() {
    printf("=== COMPLEX TESTS ===\n");
    
    const char* complex_tests[] = {
        "test_complex_control_flow.c",
        "test_complex_expressions.c", 
        "test_complex_functions.c",
        "test_complex_embedded_scenario.c"
    };
    
    int test_count = sizeof(complex_tests) / sizeof(complex_tests[0]);
    test_result_t results[test_count];
    
    for (int i = 0; i < test_count; i++) {
        run_single_test(complex_tests[i], &results[i]);
        print_test_result(&results[i]);
    }
    
    print_test_summary(results, test_count);
    return 0;
}

int run_all_tests() {
    printf("=== COMPREHENSIVE PHASE 3 VALIDATION ===\n");
    
    int basic_result = run_basic_tests();
    int integration_result = run_integration_tests();
    int complex_result = run_complex_tests();
    
    printf("\n=== PHASE 3 VALIDATION COMPLETE ===\n");
    return basic_result + integration_result + complex_result;
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        printf("Usage: %s [basic|integration|complex|all]\n", argv[0]);
        return 1;
    }
    
    if (strcmp(argv[1], "basic") == 0) {
        return run_basic_tests();
    } else if (strcmp(argv[1], "integration") == 0) {
        return run_integration_tests();
    } else if (strcmp(argv[1], "complex") == 0) {
        return run_complex_tests();
    } else if (strcmp(argv[1], "all") == 0) {
        return run_all_tests();
    } else {
        printf("Unknown test category: %s\n", argv[1]);
        return 1;
    }
}
line 1:0 token recognition error at: '#'
line 1:1 mismatched input 'include' expecting {<EOF>, 'int', 'void'}
line 2:0 token recognition error at: '#'
line 2:15 token recognition error at: '.'
line 3:0 token recognition error at: '#'
line 3:16 token recognition error at: '.'
line 4:0 token recognition error at: '#'
line 4:16 token recognition error at: '.'
line 5:0 token recognition error at: '#'
line 5:16 token recognition error at: '.'
line 6:0 token recognition error at: '#'
line 6:18 token recognition error at: '.'
line 100:22 token recognition error at: '.'
line 102:44 token recognition error at: '.'
line 103:26 token recognition error at: '.'
line 104:39 token recognition error at: '.'
line 109:73 token recognition error at: '.'
line 113:44 token recognition error at: '.'
Syntax errors found. Compilation failed.
Compiling: tests/test_grammar_fix.c
Source code:
/*
 * Test Grammar Fixes
 * Tests complex arithmetic expressions that should now work
 */

int a;
int b;
int c;
int result;

void setup() {
    a = 10;
    b = 5;
    c = 2;
    
    // Test complex arithmetic that previously failed
    result = a + b * c;  // Should be 20 (5*2=10, 10+10=20)
    printf("a + b * c = %d\n", result);
    
    // Test operator precedence
    result = a * b + c;  // Should be 52 (10*5=50, 50+2=52)
    printf("a * b + c = %d\n", result);
    
    // Test chained operations
    result = a + b + c;  // Should be 17
    printf("a + b + c = %d\n", result);
    
    result = a * b * c;  // Should be 100
    printf("a * b * c = %d\n", result);
}
Parse tree: (program (declaration (type int) a ;) (declaration (type int) b ;) (declaration (type int) c ;) (declaration (type int) result ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment a = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 10))))))))))))))) ;)) (statement (expressionStatement (expression (assignment b = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 5))))))))))))))) ;)) (statement (expressionStatement (expression (assignment c = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 2))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)) + (multiplicativeExpression (primaryExpression b) * (primaryExpression c))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "a + b * c = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a) * (primaryExpression b)) + (multiplicativeExpression (primaryExpression c))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "a * b + c = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a)) + (multiplicativeExpression (primaryExpression b)) + (multiplicativeExpression (primaryExpression c))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "a + b + c = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) (statement (expressionStatement (expression (assignment result = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression a) * (primaryExpression b) * (primaryExpression c))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "a * b * c = %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression result)))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared variable: a (int)
Declared variable: b (int)
Declared variable: c (int)
Declared variable: result (int)
Compiling function: setup
Registered function: setup at address 2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: a = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: b = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: c = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=0
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=1
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling multiplicative expression
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=2
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated assignment: result = <expression>
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=3
Resolved function call: setup to address 2
Compilation complete. Generated 45 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  a (scope=0, type=var, datatype=int, global=1, globalIndex=9)
  b (scope=0, type=var, datatype=int, global=1, globalIndex=10)
  c (scope=0, type=var, datatype=int, global=1, globalIndex=11)
  result (scope=0, type=var, datatype=int, global=1, globalIndex=12)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=13)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=2 (encoded: 0x8000002)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x1 flags=0x0 immediate=10 (encoded: 0x100000a)
3: opcode=0x51 flags=0x0 immediate=9 (encoded: 0x51000009)
4: opcode=0x1 flags=0x0 immediate=5 (encoded: 0x1000005)
5: opcode=0x51 flags=0x0 immediate=10 (encoded: 0x5100000a)
6: opcode=0x1 flags=0x0 immediate=2 (encoded: 0x1000002)
7: opcode=0x51 flags=0x0 immediate=11 (encoded: 0x5100000b)
8: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
9: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
10: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
11: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
12: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
13: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
14: opcode=0x50 flags=0x0 immediate=12 (encoded: 0x5000000c)
15: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
16: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
17: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
18: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
19: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
20: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
21: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
22: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
23: opcode=0x50 flags=0x0 immediate=12 (encoded: 0x5000000c)
24: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
25: opcode=0x18 flags=0x0 immediate=1 (encoded: 0x18000001)
26: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
27: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
28: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
29: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
30: opcode=0x3 flags=0x0 immediate=0 (encoded: 0x3000000)
31: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
32: opcode=0x50 flags=0x0 immediate=12 (encoded: 0x5000000c)
33: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
34: opcode=0x18 flags=0x0 immediate=2 (encoded: 0x18000002)
35: opcode=0x50 flags=0x0 immediate=9 (encoded: 0x50000009)
36: opcode=0x50 flags=0x0 immediate=10 (encoded: 0x5000000a)
37: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
38: opcode=0x50 flags=0x0 immediate=11 (encoded: 0x5000000b)
39: opcode=0x5 flags=0x0 immediate=0 (encoded: 0x5000000)
40: opcode=0x51 flags=0x0 immediate=12 (encoded: 0x5100000c)
41: opcode=0x50 flags=0x0 immediate=12 (encoded: 0x5000000c)
42: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
43: opcode=0x18 flags=0x0 immediate=3 (encoded: 0x18000003)
44: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "a + b * c = %d\n"
1: "a * b + c = %d\n"
2: "a + b + c = %d\n"
3: "a * b * c = %d\n"
Bytecode saved to: tests/test_grammar_fix.bin
Compilation successful!
Compiling: tests/test_array.c
Source code:
int arr[1000];

void setup() {
    arr[500] = 42;
    printf("Array value: %d\n", arr[500]);
}
Parse tree: (program (declaration (type int) arr [ 1000 ] ;) (functionDefinition (type void) setup ( ) (compoundStatement { (statement (expressionStatement (expression (assignment arr [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 500))))))))))))) ] = (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 42))))))))))))))) ;)) (statement (expressionStatement (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression (functionCall printf ( (argumentList (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression "Array value: %d\n"))))))))))))) , (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression arr [ (expression (ternaryExpression (logicalOrExpression (logicalAndExpression (logicalNotExpression (bitwiseOrExpression (bitwiseXorExpression (bitwiseAndExpression (conditionalExpression (shiftExpression (arithmeticExpression (multiplicativeExpression (primaryExpression 500))))))))))))) ])))))))))))))) ))))))))))))))) ;)) })) <EOF>)
Compiling Arduino C program...
Generated function call: setup (placeholder)
Declared array: arr[1000] (int)
Compiling function: setup
Registered function: setup at address 4
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated array assignment: arr[index] = value
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Compiling logical OR expression
Compiling logical AND expression
Compiling logical/bitwise NOT expression
Compiling bitwise OR expression
Compiling bitwise XOR expression
Compiling bitwise AND expression
Compiling conditional expression
Compiling shift expression
Compiling arithmetic expression (additive)
Compiling multiplicative expression
Generated printf call: 1 args, string_index=0
Resolved function call: setup to address 4
Compilation complete. Generated 12 instructions.
Symbol Table (scope=0):
  pinMode (scope=0, type=func, datatype=void, global=1, globalIndex=0)
  digitalWrite (scope=0, type=func, datatype=void, global=1, globalIndex=1)
  digitalRead (scope=0, type=func, datatype=int, global=1, globalIndex=2)
  analogWrite (scope=0, type=func, datatype=void, global=1, globalIndex=3)
  analogRead (scope=0, type=func, datatype=int, global=1, globalIndex=4)
  delay (scope=0, type=func, datatype=void, global=1, globalIndex=5)
  millis (scope=0, type=func, datatype=int, global=1, globalIndex=6)
  micros (scope=0, type=func, datatype=int, global=1, globalIndex=7)
  printf (scope=0, type=func, datatype=void, global=1, globalIndex=8)
  arr (scope=0, type=array, datatype=int, global=1, globalIndex=9, arraySize=1000, arrayId=0)
  setup (scope=0, type=func, datatype=void, global=1, globalIndex=10)

Generated Bytecode:
0: opcode=0x8 flags=0x0 immediate=4 (encoded: 0x8000004)
1: opcode=0x0 flags=0x0 immediate=0 (encoded: 0x0)
2: opcode=0x56 flags=0x0 immediate=0 (encoded: 0x56000000)
3: opcode=0x1 flags=0x0 immediate=1000 (encoded: 0x10003e8)
4: opcode=0x1 flags=0x0 immediate=500 (encoded: 0x10001f4)
5: opcode=0x1 flags=0x0 immediate=42 (encoded: 0x100002a)
6: opcode=0x55 flags=0x0 immediate=0 (encoded: 0x55000000)
7: opcode=0x1 flags=0x0 immediate=500 (encoded: 0x10001f4)
8: opcode=0x54 flags=0x0 immediate=0 (encoded: 0x54000000)
9: opcode=0x1 flags=0x0 immediate=1 (encoded: 0x1000001)
10: opcode=0x18 flags=0x0 immediate=0 (encoded: 0x18000000)
11: opcode=0x9 flags=0x0 immediate=0 (encoded: 0x9000000)

String Literals:
0: "Array value: %d\n"
Bytecode saved to: tests/test_array.bin
Compilation successful!
Compiling: tests/runtime_validator.c
Source code:
/*
 * Runtime Bytecode Validation Suite
 * Phase 3: Validates compiled bytecode execution correctness
 * 
 * Executes compiled .bin files through ComponentVM and validates outputs
 * against expected results using flexible string matching.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/stat.h>
#include <ctype.h>
#include "expected_outputs.h"

// Include ComponentVM C Wrapper API
#include "component_vm_c.h"

// Instruction decoding from 32-bit bytecode format
typedef struct {
    uint8_t opcode;
    uint8_t flags;
    uint16_t immediate;
} decoded_instruction_t;

// Decode 32-bit instruction from bytecode file
decoded_instruction_t decode_instruction(uint32_t encoded_instruction) {
    decoded_instruction_t instr;
    instr.opcode = (encoded_instruction >> 24) & 0xFF;
    instr.flags = (encoded_instruction >> 16) & 0xFF;
    instr.immediate = encoded_instruction & 0xFFFF;
    return instr;
}

// Test result tracking
typedef struct {
    const char* test_name;
    const char* expected_output;
    const char* expected_error;
    int should_fail;
    int passed;
    char* actual_output;
    char* error_message;
} runtime_test_result_t;

// Global test tracking
static int total_tests = 0;
static int passed_tests = 0;
static int failed_tests = 0;

// Output validation helpers
char* normalize_string(const char* str) {
    if (!str) return NULL;
    
    int len = strlen(str);
    char* normalized = malloc(len + 1);
    int out_idx = 0;
    
    // Remove extra whitespace, normalize line endings
    for (int i = 0; i < len; i++) {
        if (isspace(str[i])) {
            // Compress multiple whitespace to single space
            if (out_idx > 0 && normalized[out_idx-1] != ' ') {
                normalized[out_idx++] = ' ';
            }
        } else {
            normalized[out_idx++] = str[i];
        }
    }
    
    // Remove trailing whitespace
    while (out_idx > 0 && normalized[out_idx-1] == ' ') {
        out_idx--;
    }
    
    normalized[out_idx] = '\0';
    return normalized;
}

int validate_output(const char* expected, const char* actual) {
    if (!expected && !actual) return 1;
    if (!expected || !actual) return 0;
    
    char* norm_expected = normalize_string(expected);
    char* norm_actual = normalize_string(actual);
    
    int result = (strcmp(norm_expected, norm_actual) == 0);
    
    free(norm_expected);
    free(norm_actual);
    return result;
}

int validate_output_pattern(const char* pattern, const char* actual) {
    // For now, simple substring matching
    // Can be enhanced with regex later if needed
    return (strstr(actual, pattern) != NULL);
}

// Load and execute bytecode file using real ComponentVM
int execute_bytecode_file(const char* filename, char* output_buffer, int buffer_size) {
    FILE* file = fopen(filename, "rb");
    if (!file) {
        snprintf(output_buffer, buffer_size, "ERROR: Cannot open file %s", filename);
        return -1;
    }
    
    // Get file size
    fseek(file, 0, SEEK_END);
    long file_size = ftell(file);
    fseek(file, 0, SEEK_SET);
    
    if (file_size <= 0 || (file_size % 4) != 0) {
        fclose(file);
        snprintf(output_buffer, buffer_size, "ERROR: Invalid bytecode file size %ld bytes", file_size);
        return -1;
    }
    
    // Read encoded instructions (32-bit each)
    size_t instruction_count = file_size / 4;
    uint32_t* encoded_instructions = malloc(file_size);
    size_t read_bytes = fread(encoded_instructions, 1, file_size, file);
    fclose(file);
    
    if (read_bytes != file_size) {
        free(encoded_instructions);
        snprintf(output_buffer, buffer_size, "ERROR: Failed to read complete bytecode file");
        return -1;
    }
    
    // Convert to ComponentVM instruction format
    vm_instruction_c_t* program = malloc(instruction_count * sizeof(vm_instruction_c_t));
    printf("=== INSTRUCTION DECODING DEBUG ===\n");
    for (size_t i = 0; i < instruction_count; i++) {
        decoded_instruction_t decoded = decode_instruction(encoded_instructions[i]);
        program[i].opcode = decoded.opcode;
        program[i].flags = decoded.flags;
        program[i].immediate = decoded.immediate;
        
        printf("Instr %zu: 0x%08X -> opcode=0x%02X flags=0x%02X immediate=0x%04X\n", 
               i, encoded_instructions[i], decoded.opcode, decoded.flags, decoded.immediate);
        
        // Show first few instructions for debugging
        if (i < 5) {
            printf("  -> Will send to VM: opcode=%d flags=%d immediate=%d\n",
                   program[i].opcode, program[i].flags, program[i].immediate);
        }
    }
    printf("=== END INSTRUCTION DEBUG ===\n");
    
    free(encoded_instructions);
    
    // Execute through real ComponentVM
    printf("Executing bytecode file: %s (%zu instructions)\n", filename, instruction_count);
    
    ComponentVM_C* vm = component_vm_create();
    if (!vm) {
        free(program);
        snprintf(output_buffer, buffer_size, "ERROR: Failed to create ComponentVM instance");
        return -1;
    }
    
    // Load and execute program
    bool load_success = component_vm_load_program(vm, program, instruction_count);
    if (!load_success) {
        vm_c_error_t error = component_vm_get_last_error(vm);
        snprintf(output_buffer, buffer_size, "ERROR: Failed to load program - %s", 
                component_vm_get_error_string(error));
        component_vm_destroy(vm);
        free(program);
        return -1;
    }
    
    bool exec_success = component_vm_execute_program(vm, program, instruction_count);
    if (!exec_success) {
        vm_c_error_t error = component_vm_get_last_error(vm);
        snprintf(output_buffer, buffer_size, "ERROR: Execution failed - %s", 
                component_vm_get_error_string(error));
        component_vm_destroy(vm);
        free(program);
        return -1;
    }
    
    // Validate execution state
    if (!component_vm_is_halted(vm)) {
        snprintf(output_buffer, buffer_size, "ERROR: VM did not halt properly");
        component_vm_destroy(vm);
        free(program);
        return -1;
    }
    
    // Success - generate validation message with execution metrics
    size_t instr_count = component_vm_get_instruction_count(vm);
    vm_c_performance_metrics_t metrics = component_vm_get_performance_metrics(vm);
    
    snprintf(output_buffer, buffer_size, "EXECUTION_SUCCESS: %zu instructions executed, %zu memory ops", 
             instr_count, metrics.memory_operations);
    
    component_vm_destroy(vm);
    free(program);
    return 0;  // Success
}

void run_single_runtime_test(const runtime_test_spec_t* spec) {
    total_tests++;
    
    printf("Running runtime test: %s ... ", spec->test_name);
    fflush(stdout);
    
    // Build bytecode filename - look in tests directory
    char bytecode_path[512];
    snprintf(bytecode_path, sizeof(bytecode_path), "../tests/%s.bin", spec->test_name);
    
    // Check if bytecode file exists
    struct stat st;
    if (stat(bytecode_path, &st) != 0) {
        printf("FAIL (bytecode file not found: %s)\n", bytecode_path);
        failed_tests++;
        return;
    }
    
    // Execute bytecode
    char actual_output[4096];
    int execution_result = execute_bytecode_file(bytecode_path, actual_output, sizeof(actual_output));
    
    if (execution_result != 0 && !spec->should_fail) {
        printf("FAIL (execution error: %s)\n", actual_output);
        failed_tests++;
        return;
    }
    
    if (execution_result == 0 && spec->should_fail) {
        printf("FAIL (expected failure but execution succeeded)\n");
        failed_tests++;
        return;
    }
    
    // Validate output
    int output_valid = 0;
    if (spec->expected_output) {
        if (spec->use_pattern_matching) {
            output_valid = validate_output_pattern(spec->expected_output, actual_output);
        } else {
            output_valid = validate_output(spec->expected_output, actual_output);
        }
    } else {
        output_valid = 1;  // No specific output expected
    }
    
    if (output_valid) {
        printf("PASS\n");
        passed_tests++;
    } else {
        printf("FAIL (output mismatch)\n");
        printf("  Expected: '%s'\n", spec->expected_output ? spec->expected_output : "(none)");
        printf("  Actual:   '%s'\n", actual_output);
        failed_tests++;
    }
}

void run_all_runtime_tests() {
    printf("=== BYTECODE RUNTIME VALIDATION ===\n");
    printf("Executing compiled bytecode through ComponentVM...\n\n");
    
    // Run all tests sequentially
    for (int i = 0; runtime_test_specs[i].test_name != NULL; i++) {
        run_single_runtime_test(&runtime_test_specs[i]);
    }
    
    // Print summary
    printf("\n=== RUNTIME VALIDATION SUMMARY ===\n");
    printf("Total tests: %d\n", total_tests);
    printf("Passed: %d\n", passed_tests);
    printf("Failed: %d\n", failed_tests);
    printf("Success rate: %.1f%%\n", total_tests > 0 ? (passed_tests * 100.0) / total_tests : 0.0);
    
    if (failed_tests == 0) {
        printf("✅ ALL RUNTIME TESTS PASSED - Bytecode generation validated\n");
        printf("✅ Phase 3 runtime correctness confirmed\n");
    } else {
        printf("❌ %d runtime tests failed - Investigate bytecode generation\n", failed_tests);
    }
}

int main(int argc, char* argv[]) {
    printf("ComponentVM Runtime Bytecode Validator\n");
    printf("Phase 3: Validating compiler→bytecode→VM execution chain\n\n");
    
    run_all_runtime_tests();
    
    return (failed_tests == 0) ? 0 : 1;
}
line 9:0 token recognition error at: '#'
line 9:1 mismatched input 'include' expecting {<EOF>, 'int', 'void'}
line 9:15 token recognition error at: '.'
line 10:0 token recognition error at: '#'
line 10:16 token recognition error at: '.'
line 11:0 token recognition error at: '#'
line 11:16 token recognition error at: '.'
line 12:0 token recognition error at: '#'
line 12:16 token recognition error at: '.'
line 13:0 token recognition error at: '#'
line 13:18 token recognition error at: '.'
line 14:0 token recognition error at: '#'
line 14:15 token recognition error at: '.'
line 15:0 token recognition error at: '#'
line 18:0 token recognition error at: '#'
line 30:9 token recognition error at: '.'
line 31:9 token recognition error at: '.'
line 32:9 token recognition error at: '.'
line 64:56 token recognition error at: '''
line 64:58 token recognition error at: '''
line 65:40 token recognition error at: '''
line 65:42 token recognition error at: '''
line 73:51 token recognition error at: '''
line 73:53 token recognition error at: '''
line 77:26 token recognition error at: '''
line 77:27 token recognition error at: '\'
line 77:29 token recognition error at: '''
line 137:18 token recognition error at: '.'
line 137:35 token recognition error at: '.'
line 138:18 token recognition error at: '.'
line 138:34 token recognition error at: '.'
line 139:18 token recognition error at: '.'
line 139:38 token recognition error at: '.'
line 142:50 token recognition error at: '.'
line 142:66 token recognition error at: '.'
line 142:81 token recognition error at: '.'
line 147:29 token recognition error at: '.'
line 147:48 token recognition error at: '.'
line 147:66 token recognition error at: '.'
line 198:33 token recognition error at: '.'
line 267:41 token recognition error at: '.'
line 276:74 token recognition error at: '.'
line 276:95 token recognition error at: '.'
Syntax errors found. Compilation failed.
